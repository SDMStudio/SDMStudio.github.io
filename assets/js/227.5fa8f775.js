(window.webpackJsonp=window.webpackJsonp||[]).push([[227],{637:function(e,t,s){"use strict";s.r(t);var a=s(34),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"installation"}},[e._v("Installation")]),e._v(" "),s("p",[e._v("La bibliothèque SDM'Studio est compatible avec les plateforme "),s("em",[s("strong",[e._v("Linux")])]),e._v(" et "),s("em",[s("strong",[e._v("Mac OSX")])]),e._v(". Pour les utilisateurs de Windows 32 et 64bits, il est recommandé d'utiliser la technologie Docker (voir section "),s("a",{attrs:{href:"#images-docker"}},[e._v("Images Docker")]),e._v(").")]),e._v(" "),s("p",[e._v("Lors de l'installation, les dépendances ci-dessous seront installées:")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.boost.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("boost"),s("OutboundLink")],1),e._v(" : bibliothèque d'outils C++")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://fmt.dev",target:"_blank",rel:"noopener noreferrer"}},[e._v("fmt"),s("OutboundLink")],1),e._v(" : bibliothèque de formatage d'entrées/sorties")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://pytorch.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("torch"),s("OutboundLink")],1),e._v(" : bibliothèque de machine learning\n")])]),e._v(" "),s("h2",{attrs:{id:"installation-rapide"}},[e._v("Installation rapide")]),e._v(" "),s("p",[s("strong",[e._v("1. Prerequis (optionnel) : ILOG CPLEX")])]),e._v(" "),s("p",[e._v("Certains algorithms utilisent le logiciel propriétaire "),s("code",[e._v("ILOG CPLEX")]),e._v(" pour résoudre des programmes linéaires.\nPour utiliser ces algorithmes, téléchargez et installez "),s("code",[e._v("ILOG CPLEX")]),e._v(" depuis le site "),s("a",{attrs:{href:"https://www.ibm.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.ibm.com"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("p",[s("strong",[e._v("2. Installation")])]),e._v(" "),s("p",[e._v("Après avoir récupérer les sources de "),s("em",[e._v("SDM'Studio")]),e._v(", lancer le script "),s("code",[e._v("install.sh")]),e._v(".")]),e._v(" "),s("code-group",[s("code-block",{attrs:{title:"Linux & Mac",active:""}},[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/SDMStudio/sdms.git "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# nécessite d'installer l'utilitaire git")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" sdms\n./install.sh "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# this will install sdms sources in /usr/local/")]),e._v("\n")])])])])],1),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("Si vous avez installé CPLEX, il faudra renseigner le chemin d'installation en argument.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("./install.sh --cplex_root"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/opt/ibm/ILOG/CPLEX_Studio201/\n")])])])]),e._v(" "),s("p",[s("strong",[e._v("3. Vérification de l'installation")])]),e._v(" "),s("p",[e._v("Il est possible de tester l'installation de la manière suivante.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" build\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("test")]),e._v("\n")])])]),s("p",[e._v("Une fois l'installation terminée, vous pouvez sautez à la section "),s("RouterLink",{attrs:{to:"/fr/tutorials/quickstart.html"}},[e._v("Getting Started")]),e._v(".")],1),e._v(" "),s("h2",{attrs:{id:"installation-pas-a-pas"}},[e._v("Installation pas à pas")]),e._v(" "),s("p",[e._v("L'installation pas à pas permet de mieux comprendre les différentes étapes d'installation de "),s("em",[e._v("SDM'Studio")]),e._v(". Si vous rencontrez un problème lors de l'exécution du fichier d'installation ou si vous préférez gérer l'installation des dépendances vous-même cette section est faites pour vous.")]),e._v(" "),s("p",[s("strong",[e._v("Etape 1 : Téléchargement des sources")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/SDMStudio/sdms.git "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# nécessite d'installer l'utilitaire git ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" sdms\n")])])]),s("p",[s("strong",[e._v("Etape 2 : Installation des dépendances")])]),e._v(" "),s("code-group",[s("code-block",{attrs:{title:"Linux",active:""}},[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" update \n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" libboost-all-dev libfmt-dev libgmp-dev zlib1g-dev liblzma-dev "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("unzip")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" cmake clang\n")])])])]),e._v(" "),s("code-block",{attrs:{title:"Mac"}},[s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("brew "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" boost "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("fmt")]),e._v(" gmp zlib zma "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("unzip")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" cmake clang\n")])])])])],1),e._v(" "),s("p",[s("strong",[e._v("Etape 3 (facultatif) : Installation d'ILOG CPLEX")])]),e._v(" "),s("p",[e._v("Télécharger "),s("code",[e._v("ILOG CPLEX")]),e._v(" sur "),s("a",{attrs:{href:"https://www.ibm.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.ibm.com"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("p",[s("strong",[e._v("Etape 4 : Installation de PyTorch C++ API")])]),e._v(" "),s("p",[e._v("Téléchargez la dernière version de Pytorch C++ pour ABI cxx11 (site de téléchargement : "),s("a",{attrs:{href:"https://pytorch.org/get-started/locally/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://pytorch.org/get-started/locally/"),s("OutboundLink")],1),e._v(" ). Le choix du lien à utiliser peut dépendre des caractéristiques de votre machine. Décompressez le fichier précédemment téléchargé dans le répertoire "),s("code",[e._v("/opt/")]),e._v(" de votre ordinateur.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-xxxxxxx.zip -O libtorch.zip\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("unzip")]),e._v(" libtorch.zip -d /opt\n")])])]),s("p",[s("strong",[e._v("Etape 5 : Compilation et installation finale")])]),e._v(" "),s("p",[e._v("La dernière étape consiste à compiler le projet puis l'installer. Pour cela, nous créons le dossier build qui servira de dossier de compilation. Dans ce dossier, nous construisons les fichiers de compilation grâce à l'outil "),s("a",{attrs:{href:"https://cmake.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CMake"),s("OutboundLink")],1),e._v(" puis nous compilons et installons "),s("em",[e._v("SDM'Studio")]),e._v(" sur le système.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p build "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" build\ncmake "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" -j8 "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n")])])]),e._v(" "),s("p",[e._v("Certaines options de compilation peuvent ne pas convenir. Pour les changer, il faut fournir les arguments de compilation à la commande "),s("code",[e._v("cmake")]),e._v(".\nPar exemple, pour changer le chemin d'accès à CPLEX, il faut utilisez "),s("code",[e._v("cmake .. -DCPLEX_ROOT_DIR=/path/to/ILOG/CPLEX_VERSION/")]),e._v(".\n")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Command line")]),e._v("\ncmake "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("-DOPT1"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("VALUE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("-DOPT2"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("VALUE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("-DOPT3"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("VALUE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For instance, the following line modifies some compiling options:")]),e._v("\ncmake "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(" -DCMAKE_BUILD_TYPE"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("Release -DCMAKE_PREFIX_PATH"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=~")]),e._v("/.local/libtorch -DCPLEX_ROOT_DIR"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/opt/ibm/ILOG/CPLEX_Studio/ -DSDMS_BUILD_TESTS"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("OFF  \n")])])]),s("p",[e._v("Options :")]),e._v(" "),s("ul",[s("li",[s("em",[s("strong",[e._v("CMAKE_BUILD_TYPE")])]),e._v(" : Type de compilation "),s("code",[e._v("Debug")]),e._v(", "),s("code",[e._v("RelWithDebInfo")]),e._v(" ou "),s("code",[e._v("Release")]),e._v(" (default : "),s("code",[e._v("RelWithDebInfo")]),e._v(")")]),e._v(" "),s("li",[s("em",[s("strong",[e._v("CMAKE_PREFIX_PATH")])]),e._v(" : Chemin d'accès à libtorch (default : "),s("code",[e._v("/opt/libtorch")]),e._v(")")]),e._v(" "),s("li",[s("em",[s("strong",[e._v("CPLEX_ROOT_DIR")])]),e._v(" : Chemin d'accès à CPLEX (default : "),s("code",[e._v("/opt/ibm/ILOG/CPLEX_Studio201/")]),e._v(")")]),e._v(" "),s("li",[s("em",[s("strong",[e._v("SDMS_BUILD_TESTS")])]),e._v(" : Compile tests (default : "),s("code",[e._v("ON")]),e._v(")")]),e._v(" "),s("li",[s("em",[s("strong",[e._v("SDMS_BUILD_DOCS")])]),e._v(" : Compile the documentation (default : "),s("code",[e._v("OFF")]),e._v(")")])]),e._v(" "),s("p",[e._v("Le type de compilation permet de contrôler les options de compilations. Cela peut impacter les performances du logiciel. La compilation en mode "),s("code",[e._v("Debug")]),e._v(" ajoute l'option de compilation "),s("code",[e._v("-g")]),e._v(" pour permettre l'utilisation d'outils de débogage tel que "),s("a",{attrs:{href:"https://valgrind.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("valgrind"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Build Type")]),e._v(" "),s("th",{staticStyle:{"text-align":"center"}},[e._v("Debug")]),e._v(" "),s("th",{staticStyle:{"text-align":"center"}},[e._v("RelWithDebInfo")]),e._v(" "),s("th",{staticStyle:{"text-align":"center"}},[e._v("Release")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("Compiling time")]),e._v(" "),s("td",{staticStyle:{"text-align":"center"}},[e._v("2m30s")]),e._v(" "),s("td",{staticStyle:{"text-align":"center"}},[e._v("3m00s")]),e._v(" "),s("td",{staticStyle:{"text-align":"center"}},[e._v("3m00s")])]),e._v(" "),s("tr",[s("td",[e._v("Running time")]),e._v(" "),s("td",{staticStyle:{"text-align":"center"}},[e._v("2m40s")]),e._v(" "),s("td",{staticStyle:{"text-align":"center"}},[e._v("0m17s")]),e._v(" "),s("td",{staticStyle:{"text-align":"center"}},[e._v("0m17s")])])])]),e._v(" "),s("h2",{attrs:{id:"images-docker"}},[e._v("Images Docker")]),e._v(" "),s("p",[e._v("Grâce à la technologie Docker, il est possible d'installer "),s("em",[e._v("SDM'Studio")]),e._v(" sans se soucier des privilèges utilisateurs ni de l'OS en question. L'utilisation d'un conteneur Docker plutôt que l'installation directement sur sa machine de "),s("em",[e._v("SDM'Studio")]),e._v(" permet également d'éviter d'avoir des dépendances conflictuelles avec d'autres logiciels.")]),e._v(" "),s("h3",{attrs:{id:"i-installation-rapide-via-docker"}},[e._v("I. Installation rapide via Docker")]),e._v(" "),s("br"),e._v(" "),s("p",[s("strong",[e._v("Step 1. Télécharger les sources")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/SDMStudio/sdms.git\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" sdms\n")])])]),s("p",[s("strong",[e._v("Step 2. Configurer un environnement de développement Docker")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("./open-docker.sh\n")])])]),s("p",[s("strong",[e._v("Step 3. Installer "),s("em",[e._v("SDM'Studio")]),e._v(" dans le container")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("./install-docker.sh\n")])])]),s("p",[s("em",[e._v("SDM'Studio")]),e._v(" est désormais installé dans le container Docker correspondant.")]),e._v(" "),s("h3",{attrs:{id:"ii-utilisation-d-une-image-pre-construite"}},[e._v("II. Utilisation d'une image pré-construite")]),e._v(" "),s("p",[e._v("Il est possible de récupérer et exécuter une image docker existante sur DockerHub. Les tags disponibles sont sur "),s("a",{attrs:{href:"https://hub.docker.com/r/blavad/sdms",target:"_blank",rel:"noopener noreferrer"}},[e._v("DockerHub"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run --rm -ti blavad/sdms:"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("tag"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run --rm -ti blavad/sdms:latest\n")])])]),s("p",[e._v("Trois types d'images docker sont fournies : "),s("code",[e._v("run")]),e._v(", "),s("code",[e._v("devel")]),e._v(" et "),s("code",[e._v("build")]),e._v(". Chacune est propice à un type d'utilisation particulier.")]),e._v(" "),s("p",[s("strong",[e._v("1. Runtime Images")])]),e._v(" "),s("p",[e._v("Les images "),s("strong",[e._v("runtime")]),e._v(" (i.e. "),s("code",[e._v("blavad/sdms:*-run")]),e._v(") sont des images prêtes à l'emploi. Elles permettent d'exécuter le logiciel sans avoir à se soucier de la compilation de ce dernier. De plus, l'image est plus légère.")]),e._v(" "),s("p",[e._v("Exemple d'utilisation:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run --rm -ti blavad/sdms:0.7-cpu-run\nsdms --help\n")])])]),s("p",[s("strong",[e._v("2. Development Images")])]),e._v(" "),s("p",[e._v("Les images de "),s("strong",[e._v("développement")]),e._v(" (c'est-à-dire "),s("code",[e._v("blavad/sdms:*-devel")]),e._v(") permettent aux développeurs de plateformes d'avoir accès à un environnement configuré avec les dépendances nécessaires. Ce type d'image est particulièrement utile pour les personnes qui veulent contribuer au code avec une plateforme "),s("em",[e._v("Mac OSX")]),e._v(" ou "),s("em",[e._v("Windows")]),e._v(".")]),e._v(" "),s("p",[e._v("Exemple d'utilisation:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Example of running a development container where sources are bind mounted")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# - this setting allows to make local modifications to the code and test it using the docker container  ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run --rm -ti --mount "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("bind,source"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("pwd")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('"')]),e._v(",target"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/home/sdms blavad/sdms:0.7-cpu-devel \n")])])]),s("details",{staticClass:"custom-block details"},[s("summary",[e._v("Comment configurer un environnement de développement")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("Les développeurs peuvent utiliser l'architecture multi-stage pour bénéficier des fonctionnalités de Docker en phase de développement. Ainsi, vous pourrez tester vos modifications locales dans un container Docker. Pour cela, il vous suffit d'utiliser une image construite sur la base dev (tags *-devel sur DockerHub (opens new window)) et utiliser la fonctionnalité bind mount pour monter le répertoire local sdms dans le container. Les commandes suivantes montrent comment construire une image de développement et l'exécuter:")]),e._v(" "),s("ol",[s("li",[e._v("Télécharger les sources.")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Get sources from a specific SDM'Studio repository")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("SDMS_REPO"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" sdms\n")])])]),s("ol",[s("li",[e._v("Changer ou créer une branche de travail.")])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Checkout to the develop branch and create your own feature branch")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout develop\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout -b feature/"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("BRANCH_NAME"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[s("p",[e._v("A ce stade, vous pouvez ajout vos modifications à la plateforme.")])]),e._v(" "),s("li",[s("p",[e._v("Créer un container docker et se déplacer dans le répertoire contenant les sources.")])])]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Run the latest -devel image ( blavad/sdms:0.7-cpu-devel at this time )")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run  -ti --rm --name sdms-dev "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --mount "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("bind,source"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("pwd")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('"')]),e._v(",target"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/home/sdms "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --mount "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("bind,source"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/opt/ibm"')]),e._v(",target"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/opt/ibm "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Only if you have installed ILOG CPLEX")]),e._v("\n    blavad/sdms:0.7-cpu-devel\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Here, the container docker is running; you will be able to compile and run your code")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /sdms\n")])])]),s("p",[e._v("5.1. Si vous voulez simplement installer "),s("em",[e._v("SDM'Studio")]),e._v(" (méthode facile mais "),s("strong",[e._v("inefficace")]),e._v(").")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("./install.sh\nsdms solve --help\nsdms solve -w mabc.dpomdp -a "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"HSVI"')]),e._v(" -f "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"oMDP"')]),e._v(" -h "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v(" -m "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" -d "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n")])])]),s("p",[e._v("5.2. Si vous préférez une compilation par étape ("),s("strong",[e._v("meilleure")]),e._v(" méthode).")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" build "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" build\ncmake "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(" \n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" -j4 SDMStudio\nsrc/sdms solve --help\nsrc/sdms solve -w mabc.dpomdp -a "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"HSVI"')]),e._v(" -f "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"oMDP"')]),e._v(" -h "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v(" -m "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" -d "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v("\n")])])])]),e._v(" "),s("h3",{attrs:{id:"iii-construction-d-une-image"}},[e._v("III. Construction d'une image")]),e._v(" "),s("p",[e._v("Si aucune image docker existante ne vous convient, un fichier "),s("code",[e._v("Dockerfile")]),e._v(" est disponible pour en construire de nouvelles. La construction d'une nouvelle image se fait via la commande suivante:")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build -t sdms:"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("tag"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n")])])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("Le "),s("code",[e._v("Dockerfile")]),e._v(" qui est fournit va construire une image utilisant la version CPU de PyTorch. Vous pouvez spécifier un autre chemin pour PyTorch en passant l'argument "),s("code",[e._v("LIBTORCH_URL=<path/to/libtorch-xxxxx.zip")]),e._v(".")])]),e._v(" "),s("p",[e._v("Vous pourrez ensuite lancer un conteneur de la nouvelle image en mode interactif :")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run --rm -ti sdms:"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("tag"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),s("p",[e._v("En ajoutant certains arguments, on peut construire une image configurée pour CUDA.")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build --build-arg "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("BASE_IMAGE")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("nvidia/cuda:"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("tag"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --build-arg "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("LIBTORCH_URL")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("url/to/cuda/libtorch"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --target dev -t sdms:"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("tag"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build --build-arg "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("BASE_IMAGE")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("nvidia/cuda:10.2-cudnn7-devel-ubuntu18.04 --build-arg "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("LIBTORCH_URL")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("https://download.pytorch.org/libtorch/cu102/libtorch-cxx11-abi-shared-with-deps-1.7.1.zip --target dev -t blavad/sdms:0.1-cuda10.2-cudnn7-devel "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n")])])]),s("h3",{attrs:{id:"iv-pour-les-utilisateurs-de-grid-5000"}},[e._v("IV. Pour les utilisateurs de Grid'5000")]),e._v(" "),s("p",[e._v("Les utilisateurs du serveur de calcul "),s("em",[e._v("Grid'5000")]),e._v(" peuvent s'aider des instructions ci-dessous pour lancer leurs expérimentations sur le serveur.\nIci, la procédure décrite initialise Grid'5000 en mode GPUs.")]),e._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[e._v("Procedure d'utilisation sous Grid'5000")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Connect to a site on grid'5000")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("ssh")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("site"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(".g5k\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Get SDMS sources on g5k with the way you prefer (git clone, scp or rsync)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/SDMStudio/sdms.git\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" sdms/\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Reserve a node with GPUs (params should be adapted to your needs)")]),e._v("\noarsub -p "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"cluster='cluster-name'\"")]),e._v(" -I\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Setup CUDA and CUDNN for Docker in the interactive node")]),e._v("\ng5k-setup-nvidia-docker -t\nmodule load cudnn\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Pull the docker image that is adapted for your usage (on g5k must be 'cuda10.1-cudnn8') ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" pull blavad/sdms:"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("version"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ex: docker pull blavad/sdms:0.1-cuda10.1-cudnn8-devel")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# (alternatively you can build the image yourself)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# docker build --build-arg BASE_IMAGE=nvidia/cuda:10.1-cudnn8-devel-ubuntu18.04 --build-arg LIBTORCH_URL=https://download.pytorch.org/libtorch/cu101/libtorch-cxx11-abi-shared-with-deps-1.8.0%2Bcu101.zip --target dev -t  sdms:0.1-cuda10.1-cudnn8-devel .")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Run the docker image interactively")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run --rm --gpus all -ti --name sdms-dev --mount "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("bind,source"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("pwd")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('"')]),e._v(",target"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/home/sdms blavad/sdms:"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("version"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Run experiments on your needs ")]),e._v("\n")])])])])],1)}),[],!1,null,null,null);t.default=n.exports}}]);