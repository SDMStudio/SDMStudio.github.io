(window.webpackJsonp=window.webpackJsonp||[]).push([[249],{659:function(t,s,e){"use strict";e.r(s);var a=e(34),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"installation"}},[t._v("Installation")]),t._v(" "),e("p",[t._v("The library SDM'Studio is compatible with "),e("em",[e("strong",[t._v("Linux")])]),t._v(" and "),e("em",[e("strong",[t._v("Mac OSX")])]),t._v(" platforms. Windows users are advised to make use of Docker (see section "),e("a",{attrs:{href:"#docker-images"}},[t._v("Docker Images")]),t._v(").")]),t._v(" "),e("p",[t._v("The SDM'Studio platform requires the libraries below mentionned:")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.boost.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("boost"),e("OutboundLink")],1),t._v(" : C++ tools library")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://fmt.dev",target:"_blank",rel:"noopener noreferrer"}},[t._v("fmt"),e("OutboundLink")],1),t._v(" : library to format inputs and outputs")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://pytorch.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("torch"),e("OutboundLink")],1),t._v(" : machine learning library")])]),t._v(" "),e("h2",{attrs:{id:"install-from-sources"}},[t._v("Install from sources")]),t._v(" "),e("p",[e("strong",[t._v("1. Prerequisite (optional) : ILOG CPLEX")])]),t._v(" "),e("p",[t._v("Some algorithms use "),e("code",[t._v("ILOG CPLEX")]),t._v(" solver to get solutions of linear programs.\nTo be able to run these algorithms, download "),e("code",[t._v("ILOG CPLEX")]),t._v(" on "),e("a",{attrs:{href:"https://www.ibm.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.ibm.com"),e("OutboundLink")],1),t._v(" and install it.")]),t._v(" "),e("p",[e("strong",[t._v("2. Installation")])]),t._v(" "),e("p",[t._v("To install "),e("em",[t._v("SDM'Studio")]),t._v(" from sources, simply get sources and execute the file "),e("code",[t._v("install.sh")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/SDMStudio/sdms.git "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# you need `git` to be installed")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" sdms\n./install.sh "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# this will install sdms sources in /usr/local/")]),t._v("\n")])])]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("If you have installed CPLEX, you will need to fill in the installation path as an argument.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("./install.sh --cplex_root"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/opt/ibm/ILOG/CPLEX_Studio201/\n")])])])]),t._v(" "),e("p",[e("strong",[t._v("3. Check the installation")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" build\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v("\n")])])]),e("p",[t._v("If installation suceed, go to the "),e("RouterLink",{attrs:{to:"/tutorials/quickstart.html"}},[t._v("Getting Started")]),t._v(" section.")],1),t._v(" "),e("h2",{attrs:{id:"step-by-step-installation"}},[t._v("Step by step installation")]),t._v(" "),e("p",[t._v("The step by step installation allows to better understand the different stages in the installation procedure. If you face a problem when executing "),e("code",[t._v("install.sh")]),t._v(" or if you prefer manage dependencies by yourself, this section is for you.")]),t._v(" "),e("p",[e("strong",[t._v("Step 1 : Downloading "),e("em",[t._v("SDM'Studio")]),t._v(" sources")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/SDMStudio/sdms.git "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# you need `git` to be installed ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" sdms\n")])])]),e("p",[e("strong",[t._v("Step 2 : Installing "),e("em",[t._v("SDM'Studio")]),t._v(" dependencies")])]),t._v(" "),e("code-group",[e("code-block",{attrs:{title:"Linux",active:""}},[e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" update \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" libboost-all-dev libfmt-dev libgmp-dev zlib1g-dev liblzma-dev "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("unzip")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" cmake clang\n")])])])]),t._v(" "),e("code-block",{attrs:{title:"Mac"}},[e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("brew "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" boost "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fmt")]),t._v(" gmp zlib zma "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("unzip")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" cmake clang\n")])])])])],1),t._v(" "),e("p",[e("strong",[t._v("Step 3 (optional) : Installing ILOG CPLEX")])]),t._v(" "),e("p",[t._v("Download "),e("code",[t._v("ILOG CPLEX")]),t._v(" on "),e("a",{attrs:{href:"https://www.ibm.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.ibm.com"),e("OutboundLink")],1),t._v(" and install it.")]),t._v(" "),e("p",[e("strong",[t._v("Step 4 : Installing de PyTorch C++ API")])]),t._v(" "),e("p",[t._v("Download the last version of PyTorch C++ for cxx11 ABI according to your machine requirements (download links are accessible at  "),e("a",{attrs:{href:"https://pytorch.org/get-started/locally/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://pytorch.org/get-started/locally/"),e("OutboundLink")],1),t._v(" ). Uncompress the files in "),e("code",[t._v("/opt/")]),t._v(" directory.")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-xxxxxxx.zip -O libtorch.zip\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("unzip")]),t._v(" libtorch.zip -d /opt\n")])])]),e("p",[e("strong",[t._v("Step 5 : Compiling and installing "),e("em",[t._v("SDM'Studio")])])]),t._v(" "),e("p",[t._v("For the last step, let's compile the project and install it on your machine. To this end, we will create a folder called "),e("code",[t._v("build")]),t._v(" and use "),e("a",{attrs:{href:"https://cmake.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CMake"),e("OutboundLink")],1),t._v(" to build compilation files in this folder. We now are able to install "),e("em",[t._v("SDM'Studio")]),t._v(" on the system.")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p build "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" build\ncmake "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" -j8 "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n")])])]),t._v(" "),e("p",[t._v("Some options can be provided when executing "),e("code",[t._v("cmake")]),t._v(" command. These options may be used to customize the installation on your needs.\nFor instance, a modification in the path to CPLEX can be specified with the argument "),e("code",[t._v("cmake .. -DCPLEX_ROOT_DIR=/path/to/ILOG/CPLEX_VERSION/")]),t._v(".\n")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Command line")]),t._v("\ncmake "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-DOPT1"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("VALUE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-DOPT2"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("VALUE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-DOPT3"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("VALUE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# For instance, the following line modifies some compiling options:")]),t._v("\ncmake "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" -DCMAKE_BUILD_TYPE"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Release -DCMAKE_PREFIX_PATH"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=~")]),t._v("/.local/libtorch -DCPLEX_ROOT_DIR"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/opt/ibm/ILOG/CPLEX_Studio/ -DSDMS_BUILD_TESTS"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("OFF  \n")])])]),e("p",[t._v("Options :")]),t._v(" "),e("ul",[e("li",[e("em",[e("strong",[t._v("CMAKE_BUILD_TYPE")])]),t._v(" : Compiling type "),e("code",[t._v("Debug")]),t._v(", "),e("code",[t._v("RelWithDebInfo")]),t._v(" or "),e("code",[t._v("Release")]),t._v(" (default : "),e("code",[t._v("RelWithDebInfo")]),t._v(")")]),t._v(" "),e("li",[e("em",[e("strong",[t._v("CMAKE_PREFIX_PATH")])]),t._v(" : Absolute path to libtorch (default : "),e("code",[t._v("/opt/libtorch")]),t._v(")")]),t._v(" "),e("li",[e("em",[e("strong",[t._v("CPLEX_ROOT_DIR")])]),t._v(" : Absolute path to CPLEX (default : "),e("code",[t._v("/opt/ibm/ILOG/CPLEX_Studio201/")]),t._v(")")]),t._v(" "),e("li",[e("em",[e("strong",[t._v("SDMS_BUILD_TESTS")])]),t._v(" : Build tests (default : "),e("code",[t._v("ON")]),t._v(")")]),t._v(" "),e("li",[e("em",[e("strong",[t._v("SDMS_BUILD_DOCS")])]),t._v(" : Build the documentation (default : "),e("code",[t._v("OFF")]),t._v(")")])]),t._v(" "),e("p",[t._v("The parameter "),e("code",[t._v("CMAKE_BUILD_TYPE")]),t._v(" will change the options of the compilation. This can impact the speed of the software. Build the program in "),e("code",[t._v("Debug")]),t._v(" mode will add the option "),e("code",[t._v("-g")]),t._v(" and, thus, allow to use debugging tools such as "),e("a",{attrs:{href:"https://valgrind.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("valgrind"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Build Type")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Debug")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("RelWithDebInfo")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Release")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("Compiling time")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2m30s")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3m00s")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3m00s")])]),t._v(" "),e("tr",[e("td",[t._v("Running time")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2m40s")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0m17s")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("0m17s")])])])]),t._v(" "),e("h2",{attrs:{id:"docker-images"}},[t._v("Docker Images")]),t._v(" "),e("p",[t._v("Docker provides a way to install "),e("em",[t._v("SDM'Studio")]),t._v(" on any OS.")]),t._v(" "),e("h3",{attrs:{id:"i-quick-install-with-docker"}},[t._v("I. Quick install with Docker")]),t._v(" "),e("br"),t._v(" "),e("p",[e("strong",[t._v("Step 1. Get sources")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/SDMStudio/sdms.git\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" sdms\n")])])]),e("p",[e("strong",[t._v("Step 2. Configure a development environment with Docker")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("./open-docker.sh\n")])])]),e("p",[e("strong",[t._v("Step 3. Install "),e("em",[t._v("SDM'Studio")]),t._v(" in the container")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("./install-docker.sh\n")])])]),e("p",[e("em",[t._v("SDM'Studio")]),t._v(" is now installed in the corresponding Docker container.")]),t._v(" "),e("h3",{attrs:{id:"ii-using-pre-built-images"}},[t._v("II. Using pre-built images")]),t._v(" "),e("p",[t._v("You can run a pre-built docker image from the Docker Hub. See available tags on "),e("a",{attrs:{href:"https://hub.docker.com/r/blavad/sdms",target:"_blank",rel:"noopener noreferrer"}},[t._v("DockerHub"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run --rm -ti blavad/sdms:"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("TAG"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run --rm -ti blavad/sdms:"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("VERSION"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("-"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("PROCESSOR"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("-"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("TYPE"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Most of the tags follow this format")]),t._v("\n")])])]),e("p",[t._v("There are three types of image ("),e("code",[t._v("run")]),t._v(", "),e("code",[t._v("devel")]),t._v(" and "),e("code",[t._v("build")]),t._v(").")]),t._v(" "),e("p",[e("strong",[t._v("1. Runtime Images")])]),t._v(" "),e("p",[t._v("The "),e("strong",[t._v("runtime")]),t._v(" images (i.e. "),e("code",[t._v("blavad/sdms:*-run")]),t._v(") are ready-to-run images. They allow you to run the software without having to worry about compiling it. In addition, the image is lighter.")]),t._v(" "),e("p",[t._v("Usage example:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run --rm -ti blavad/sdms:0.7-cpu-run\nsdms --help\n")])])]),e("p",[e("strong",[t._v("2. Development Images")])]),t._v(" "),e("p",[t._v("The "),e("strong",[t._v("development")]),t._v(" images (i.e. "),e("code",[t._v("blavad/sdms:*-devel")]),t._v(") allow platform developers to have access to a configured environment with the necessary dependencies. This type of image is particularly useful for people who want to contribute to the code with a "),e("em",[t._v("Mac OSX")]),t._v(" or "),e("em",[t._v("Windows")]),t._v(" platform.")]),t._v(" "),e("p",[t._v("Usage example:")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Example of running a development container where sources are bind mounted")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# - this setting allows to make local modifications to the code and test it using the docker container  ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run --rm -ti --mount "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("bind,source"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("pwd")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),t._v(",target"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/home/sdms blavad/sdms:0.7-cpu-devel \n")])])]),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("How to setup the developer environment")]),t._v(" "),e("ol",[e("li",[t._v("Get sources.")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Get sources from a specific SDM'Studio repository")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("SDMS_REPO"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" sdms\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("Checkout to or create your working branch.")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Checkout to the develop branch and create your own feature branch")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout develop\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b feature/"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("BRANCH_NAME"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[e("p",[t._v("Now, you can add your code.")])]),t._v(" "),e("li",[e("p",[t._v("Run develop image and move to the source directory.")])])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Run the latest -devel image ( blavad/sdms:0.7-cpu-devel at this time )")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run  -ti --rm --mount "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("bind,source"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("pwd")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),t._v(",target"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/sdms blavad/sdms:0.7-cpu-devel\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Here, the container docker is running; you will be able to compile and run your code")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" /sdms\n")])])]),e("p",[t._v("5.1. If you only need to install and use "),e("em",[t._v("SDM'Studio")]),t._v(" (slower method).")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("./install.sh\nsdms solve --help\nsdms solve -w mabc.dpomdp -a "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HSVI"')]),t._v(" -f "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"oMDP"')]),t._v(" -h "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" -m "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" -d "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),e("p",[t._v("5.2. If you prefer a step by step compilation and usage ("),e("strong",[t._v("better")]),t._v(" method).")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" build "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" build\ncmake "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" -j4 SDMStudio\nsrc/sdms solve --help\nsrc/sdms solve -w mabc.dpomdp -a "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HSVI"')]),t._v(" -f "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"oMDP"')]),t._v(" -h "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" -m "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" -d "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])])]),t._v(" "),e("h3",{attrs:{id:"iii-building-the-image-yourself"}},[t._v("III. Building the image yourself")]),t._v(" "),e("p",[t._v("To build a custom image, you can use the "),e("code",[t._v("Dockerfile")]),t._v(" provided. The command is :")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build -t sdms:"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("TAG_NAME"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("The default "),e("code",[t._v("Dockerfile")]),t._v(" will build images with  PyTorch for CPU.  You can specify another path to the PyTorch repository by adding the argument : "),e("code",[t._v("LIBTORCH_URL=<PATH/TO/libtorch-xxxxx.zip>")]),t._v(".")])]),t._v(" "),e("p",[t._v("With custom parameters, it is possible to build an image that is configure to work with any required version of CUDA.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build --build-arg "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("BASE_IMAGE")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("nvidia/cuda:"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("CUDA_TAG_NAME"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" --build-arg "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("LIBTORCH_URL")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")]),t._v("/TO/CUDA/LIBTORCH"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" --target dev -t sdms:"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("TAG_NAME"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build --build-arg "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("BASE_IMAGE")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("nvidia/cuda:10.2-cudnn7-devel-ubuntu18.04 --build-arg "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("LIBTORCH_URL")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("https://download.pytorch.org/libtorch/cu102/libtorch-cxx11-abi-shared-with-deps-1.7.1.zip --target dev -t blavad/sdms:0.7-cuda10.2-cudnn7-devel.\n")])])]),e("p",[t._v("It will then be possible to instanciate a container from previously built image in interactive mode.")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run --rm -ti sdms:"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("TAG_NAME"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),t._v(" "),e("h3",{attrs:{id:"iv-grid-5000-users"}},[t._v("IV. Grid'5000 users")]),t._v(" "),e("p",[t._v("The following contains few commands that could help Grid'5000 users in their use of "),e("em",[t._v("SDM'Studio")]),t._v(" under this server. To run experiments with GPUs on Grid'5000, one could follow the procedure below.")]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("Procedure to follow on Grid'5000")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Connect to a site on grid'5000")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ssh")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("site"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".g5k\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Get SDMS sources on g5k with the way you prefer (git clone, scp or rsync)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("SDMS_REPO"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" sdms/\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Reserve a node with GPUs (params should be adapted to your needs)")]),t._v("\noarsub -p "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"cluster='cluster-name'\"")]),t._v(" -I\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Setup CUDA and CUDNN for Docker in the interactive node")]),t._v("\ng5k-setup-nvidia-docker -t\nmodule load cudnn\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Pull the docker image that is adapted for your usage (on g5k must be 'cuda10.1-cudnn8') ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" pull blavad/sdms:"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("version"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ex: docker pull blavad/sdms:0.7-cuda10.1-cudnn8-devel")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (alternatively you can build the image yourself)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker build --build-arg BASE_IMAGE=nvidia/cuda:10.1-cudnn8-devel-ubuntu18.04 --build-arg LIBTORCH_URL=https://download.pytorch.org/libtorch/cu101/libtorch-cxx11-abi-shared-with-deps-1.8.0%2Bcu101.zip --target dev -t  sdms:0.1-cuda10.1-cudnn8-devel .")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Run the docker image interactively")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run --rm --gpus all -ti --name sdms-dev  --mount "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("bind,source"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("pwd")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),t._v(",target"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/home/sdms blavad/sdms:"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("version"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Run experiments on your needs ")]),t._v("\n")])])])])],1)}),[],!1,null,null,null);s.default=n.exports}}]);