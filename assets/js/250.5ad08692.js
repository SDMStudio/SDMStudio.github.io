(window.webpackJsonp=window.webpackJsonp||[]).push([[250],{660:function(s,t,a){"use strict";a.r(t);var e=a(34),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"getting-started"}},[s._v("Getting started")]),s._v(" "),a("p",[s._v("Installing "),a("em",[s._v("SDM'Studio")]),s._v(" results in installing four types of files (binaries, headers, libraries and the documentation). By default, those files are located in the following repositories:")]),s._v(" "),a("ul",[a("li",[s._v("binaries : "),a("code",[s._v("/usr/local/bin/")])]),s._v(" "),a("li",[s._v("headers : "),a("code",[s._v("/usr/local/include/")])]),s._v(" "),a("li",[s._v("libraries : "),a("code",[s._v("/usr/local/lib/")])]),s._v(" "),a("li",[s._v("documentation : "),a("code",[s._v("/usr/local/share/")])])]),s._v(" "),a("h2",{attrs:{id:"command-line-interface"}},[s._v("Command Line Interface")]),s._v(" "),a("p",[s._v("The main program is called "),a("code",[s._v("sdms")]),s._v(". This program gather all functionalities of the software. Firstly, let's execute the commands below:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("sdms solve -a "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"A*"')]),s._v(" -f "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"OccupancyMDP"')]),s._v(" \nsdms solve -a "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HSVI"')]),s._v(" -f "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"OccupancyMDP"')]),s._v(" \nsdms solve -a "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"QLearning"')]),s._v(" -f "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"OccupancyMDP"')]),s._v(" -m "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" -e "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" -t "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("\n")])])]),a("p",[s._v("You just solved a "),a("strong",[s._v("decentralized POMDP")]),s._v(" thanks to three different algorithms (A*, HSVI and Q-Learning). The "),a("code",[s._v("-f")]),s._v(" parameter tells the program to use the "),a("strong",[s._v("occupancy MDP")]),s._v(" reformulation to solve it. To check the different usage of "),a("code",[s._v("sdms")]),s._v(", simply run  "),a("code",[s._v("sdms --help")]),s._v(" or "),a("code",[s._v("man sdms")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("    Usage : sdms COMMAND\n\n    The best solver for sequential decision making problems.\n\n    Commands:\n      algorithms\t\tDisplay all available algorithms.\n      formalisms\t\tDisplay all available formalisms.\n      help\t\t\tShow this help message.\n      solve\t\t\tSolve a sequential decision making problem using specified algorithm.\n      test\t\t\tTest a policy.\n      version\t\tShow the version.\n      worlds\t\tDisplay all available worlds.\n\n    Run 'sdms COMMAND --help' for more information on a command.\n")])])]),a("p",[s._v("The main program uses aliases to other programs. For instance, the command "),a("code",[s._v("sdms solve")]),s._v(" is equivalent to "),a("code",[s._v("sdms-solve")]),s._v(". The next command lines produce the same outputs.")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("sdms solve --help\nsdms-solve --help\n")])])]),a("h3",{attrs:{id:"formulating-a-problem"}},[s._v("Formulating a problem")]),s._v(" "),a("p",[s._v("To define a new problem, one way is to write a file of the standardized format "),a("code",[s._v(".pomdp")]),s._v(" by Anthony Cassandra. This format is described in the file "),a("a",{attrs:{href:"/tiger.txt"}},[s._v("tiger.dpomdp")]),s._v(". We also consider the format "),a("code",[s._v(".dpomdp")]),s._v(" and "),a("code",[s._v(".posg")]),s._v(", which are extensions of "),a("code",[s._v(".pomdp")]),s._v(". Predefined problems can be found in "),a("code",[s._v("/usr/local/share/sdms/world/")]),s._v(".")]),s._v(" "),a("h2",{attrs:{id:"start-with-the-sdms-library"}},[s._v("Start with the SDMS library")]),s._v(" "),a("p",[s._v("For a set of examples, please refer to this "),a("a",{attrs:{href:"https://github.com/SDMStudio/sdms/tree/main/src/examples",target:"_blank",rel:"noopener noreferrer"}},[s._v("folder"),a("OutboundLink")],1),s._v(".")]),s._v(" "),a("p",[s._v("Letâ€™s write a tiny C++ file called "),a("code",[s._v("backinduct.cpp")]),s._v(" that includes "),a("code",[s._v("sdm/parser/parser.hpp")]),s._v(" and for now simply prints out a parsed problem:")]),s._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sdm/config.hpp>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sdm/parser/parser.hpp>")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("auto")]),s._v(" problem "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sdm"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("parser"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parse_file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sdm"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("config"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("PROBLEM_PATH "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dpomdp/mabc.dpomdp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("problem "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n")])])]),a("h3",{attrs:{id:"defining-the-transformed-problems"}},[s._v("Defining the transformed problems")]),s._v(" "),a("p",[s._v("Now that we have basic environment configured, we can dive into a much more interesting part of this turorial. First we will discuss how to transform the original problem into a problem that can be solved by dynamic programming algorithms. Then, we will show how to define a customed problem reformulation and solve it with existing algorithms")]),s._v(" "),a("p",[a("strong",[s._v("Using an existing problem reformulation")])]),s._v(" "),a("p",[s._v("Let's consider we are looking for a way to solve a POMDP with basic MDP oriented algorithms. To this end, let's define a reformulation of the original POMDP  called belief MDP.")]),s._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[s._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("shared_ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("POMDPInterface"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" pomdp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sdm"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("parser"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parse_file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sdm"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("config"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("PROBLEM_PATH "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dpomdp/mabc.dpomdp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("shared_ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BeliefMDP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" belief_mdp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make_shared")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BeliefMDP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pomdp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("This reformulation assumes that the state transition go over beliefs instead of states. The main advantage of using this relaxation is that standard algorithms for MDP can now be applied. The full example of code is below:")]),s._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sdm/config.hpp>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sdm/parser/parser.hpp>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sdm/world/belief_mdp.hpp>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sdm/algorithms/planning/backward_induction.hpp>")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" sdm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Parse the problem file")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("auto")]),s._v(" pomdp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sdm"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("parser"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("parse_file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sdm"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("config"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("PROBLEM_PATH "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dpomdp/tiger.dpomdp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    pomdp"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setHorizon")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Recast the problem instance into a solvable interface")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("auto")]),s._v(" belief_mdp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make_shared")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BeliefMDP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pomdp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Instanciate the algorithm")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("auto")]),s._v(" algo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make_shared")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BackwardInduction"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("belief_mdp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Initialize and solve")]),s._v("\n    algo"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("initialize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    algo"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("solve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);