<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classsdm_1_1SerializedMDP" kind="class" language="C++" prot="public">
    <compoundname>sdm::SerializedMDP</compoundname>
    <basecompoundref refid="classsdm_1_1SolvableByHSVI" prot="public" virt="non-virtual">sdm::SolvableByHSVI&lt; oState, oAction &gt;</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; SerializedMDP&lt; oState, oAction &gt; &gt;</basecompoundref>
    <includes refid="serialized__mdp_8hpp" local="no">serialized_mdp.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename oState</type>
        <defval><ref refid="classsdm_1_1SerializedState" kindref="compound">SerializedState</ref></defval>
      </param>
      <param>
        <type>typename oAction</type>
        <defval><ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classsdm_1_1SerializedMDP_1ae5d48787dc15108f8e8a4d97e999ea19" prot="public" static="no">
        <type>oState</type>
        <definition>using sdm::SerializedMDP&lt; oState, oAction &gt;::state_type =  oState</definition>
        <argsstring></argsstring>
        <name>state_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="36" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsdm_1_1SerializedMDP_1a93be083ecda5ca308b68cc6f7b10ca21" prot="public" static="no">
        <type>oAction</type>
        <definition>using sdm::SerializedMDP&lt; oState, oAction &gt;::action_type =  oAction</definition>
        <argsstring></argsstring>
        <name>action_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="37" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classsdm_1_1SerializedMDP_1a20c4c2eaf257ee0e9239c89414fd88e3" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classsdm_1_1DiscreteMMDP" kindref="compound">DiscreteMMDP</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DiscreteMMDP&gt; sdm::SerializedMDP&lt; oState, oAction &gt;::mmdp_</definition>
        <argsstring></argsstring>
        <name>mmdp_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="33" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsdm_1_1SerializedMDP_1a2f61e46a2e8054ca8373c0818e3422ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sdm::SerializedMDP&lt; oState, oAction &gt;::SerializedMDP</definition>
        <argsstring>(std::shared_ptr&lt; DiscreteMMDP &gt; underlying_mmdp)</argsstring>
        <name>SerializedMDP</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsdm_1_1DiscreteMMDP" kindref="compound">DiscreteMMDP</ref> &gt;</type>
          <declname>underlying_mmdp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SerializedMDP_1ac7a33d8721242f937f2f516a41627af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sdm::SerializedMDP&lt; oState, oAction &gt;::SerializedMDP</definition>
        <argsstring>(std::string underlying_mmdp)</argsstring>
        <name>SerializedMDP</name>
        <param>
          <type>std::string</type>
          <declname>underlying_mmdp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SerializedMDP_1a9becb9f1255595d2f6c4bc6786da06da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsdm_1_1SerializedMDP" kindref="compound">SerializedMDP</ref> &gt;</type>
        <definition>std::shared_ptr&lt;SerializedMDP&gt; sdm::SerializedMDP&lt; oState, oAction &gt;::getptr</definition>
        <argsstring>()</argsstring>
        <name>getptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SerializedMDP_1a0038a6571f657b6bdc6fc85442dfeb81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>oState &amp;</type>
        <definition>oState&amp; sdm::SerializedMDP&lt; oState, oAction &gt;::getState</definition>
        <argsstring>()</argsstring>
        <name>getState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SerializedMDP_1a9164529a533350b081078364233827a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double sdm::SerializedMDP&lt; oState, oAction &gt;::getDiscount</definition>
        <argsstring>(int t) const</argsstring>
        <name>getDiscount</name>
        <param>
          <type>int</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SerializedMDP_1a1d3bd55486ddc7328c27d8e788a7fecd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool sdm::SerializedMDP&lt; oState, oAction &gt;::isSerialized</definition>
        <argsstring>() const</argsstring>
        <name>isSerialized</name>
        <reimplements refid="classsdm_1_1SolvableByHSVI_1aa99d7d6e88cbf175137ca5c4412f0d12">isSerialized</reimplements>
        <briefdescription>
<para>Check if the problem is serialized. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the problem is serialized. </para></simplesect>
<simplesect kind="return"><para>false if the problem is not serialized. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SerializedMDP_1a1d5edceaf3f4b27e47e3da247acfa796" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classsdm_1_1DiscreteMMDP" kindref="compound">DiscreteMMDP</ref> *</type>
        <definition>DiscreteMMDP* sdm::SerializedMDP&lt; oState, oAction &gt;::getUnderlyingProblem</definition>
        <argsstring>()</argsstring>
        <name>getUnderlyingProblem</name>
        <reimplements refid="classsdm_1_1SolvableByHSVI_1a55a1920c31c0b74fa1edc954190ab820">getUnderlyingProblem</reimplements>
        <briefdescription>
<para>Get the underlying problem. For instance the underlying DecPOMDP of the <ref refid="classsdm_1_1OccupancyMDP" kindref="compound">OccupancyMDP</ref> or the underlying POMDP of the current <ref refid="classsdm_1_1BeliefMDP" kindref="compound">BeliefMDP</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the underlying problem </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SerializedMDP_1a78bf890b9fdafb72728faa8f1e15f662" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>oState</type>
        <definition>oState sdm::SerializedMDP&lt; oState, oAction &gt;::getInitialState</definition>
        <argsstring>()</argsstring>
        <name>getInitialState</name>
        <reimplements refid="classsdm_1_1SolvableByHSVI_1ac0a1fff056c61d42da7fe9aad571771d">getInitialState</reimplements>
        <briefdescription>
<para>Get the initial state. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SerializedMDP_1a409a03b53d926e779dc88da54a0b8355" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>oState</type>
        <definition>oState sdm::SerializedMDP&lt; oState, oAction &gt;::nextState</definition>
        <argsstring>(const oState &amp;ostate, const oAction &amp;oaction, int t=0, HSVI&lt; oState, oAction &gt; *hsvi=nullptr) const</argsstring>
        <name>nextState</name>
        <reimplements refid="classsdm_1_1SolvableByHSVI_1a6c4d6cfdb1211ed8a0a8a591f96cb551">nextState</reimplements>
        <param>
          <type>const oState &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const oAction &amp;</type>
          <declname>action</declname>
        </param>
        <param>
          <type>int</type>
          <declname>t</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classsdm_1_1HSVI" kindref="compound">HSVI</ref>&lt; oState, oAction &gt; *</type>
          <declname>hsvi</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Get the next occupancy state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>the occupancy state </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>the action state </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the timestep </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hsvi</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer on the algorithm that makes the call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the next occupancy state </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SerializedMDP_1abb4d23882592a2e63760b425a6d6f482" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classsdm_1_1DiscreteSpace" kindref="compound">DiscreteSpace</ref>&lt; oAction &gt; &gt;</type>
        <definition>std::shared_ptr&lt;DiscreteSpace&lt;oAction&gt; &gt; sdm::SerializedMDP&lt; oState, oAction &gt;::getActionSpaceAt</definition>
        <argsstring>(const oState &amp;)</argsstring>
        <name>getActionSpaceAt</name>
        <reimplements refid="classsdm_1_1SolvableByHSVI_1a0534ed754224f9b7bc87edb08ba62d6a">getActionSpaceAt</reimplements>
        <param>
          <type>const oState &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Get the actions availables at a specific state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>the state </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the action space </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SerializedMDP_1ac42f1d8272df65e12a5933e73975cea6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double sdm::SerializedMDP&lt; oState, oAction &gt;::getReward</definition>
        <argsstring>(const oState &amp;ostate, const oAction &amp;oaction) const</argsstring>
        <name>getReward</name>
        <reimplements refid="classsdm_1_1SolvableByHSVI_1a02c997720580a7c9c49784addf3ffee0">getReward</reimplements>
        <param>
          <type>const oState &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const oAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Get the reward at a given occupancy state and occupancy action. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SerializedMDP_1ae9bbe5035970aa7b761dd4afa2df89e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double sdm::SerializedMDP&lt; oState, oAction &gt;::getExpectedNextValue</definition>
        <argsstring>(ValueFunction&lt; oState, oAction &gt; *value_function, const oState &amp;ostate, const oAction &amp;oaction, int t=0) const</argsstring>
        <name>getExpectedNextValue</name>
        <reimplements refid="classsdm_1_1SolvableByHSVI_1a8ef08843154d1145054256bd981a5b0b">getExpectedNextValue</reimplements>
        <param>
          <type><ref refid="classsdm_1_1ValueFunction" kindref="compound">ValueFunction</ref>&lt; oState, oAction &gt; *</type>
          <declname>value_function</declname>
        </param>
        <param>
          <type>const oState &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const oAction &amp;</type>
          <declname>action</declname>
        </param>
        <param>
          <type>int</type>
          <declname>t</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the expected next value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value_function</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer on the value function to use to perform the calculus. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>the state on which to evaluate the next expected value * </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SerializedMDP_1adc7dea46985a3040a8fcea921ab2699c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsdm_1_1SerializedMDP" kindref="compound">SerializedMDP</ref> &gt;</type>
        <definition>std::shared_ptr&lt;SerializedMDP&gt; sdm::SerializedMDP&lt; oState, oAction &gt;::toMDP</definition>
        <argsstring>()</argsstring>
        <name>toMDP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SerializedMDP_1a25c7588857269227bc1f492432a97876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsdm_1_1BeliefMDP" kindref="compound">BeliefMDP</ref>&lt; <ref refid="namespacesdm_1a0f879b55491e973a5c14fb31452c9a3f" kindref="member">BeliefState</ref>, <ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref>, <ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt;BeliefMDP&lt;BeliefState, number, number&gt; &gt; sdm::SerializedMDP&lt; oState, oAction &gt;::toBeliefMDP</definition>
        <argsstring>()</argsstring>
        <name>toBeliefMDP</name>
        <briefdescription>
<para>Get the corresponding Belief Markov Decision Process. Unfortunately, in this situation it isn&apos;t possible to transform a MMDP to a belief MDP. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a belief MDP </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="66" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An Serialized MDP is a subclass of MDP where states are serialized states. In the general case, a serialized state refers to the whole knowledge that a central planner can have access to take decisions at the time step of an precise agent. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>oState</parametername>
</parameternamelist>
<parameterdescription>
<para>refer to the serialized state type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oAction</parametername>
</parameternamelist>
<parameterdescription>
<para>refer to the number type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="598">
        <label>std::enable_shared_from_this&lt; SerializedMDP&lt; oState, oAction &gt; &gt;</label>
      </node>
      <node id="597">
        <label>sdm::SolvableByHSVI&lt; oState, oAction &gt;</label>
        <link refid="classsdm_1_1SolvableByHSVI"/>
      </node>
      <node id="596">
        <label>sdm::SerializedMDP&lt; oState, oAction &gt;</label>
        <link refid="classsdm_1_1SerializedMDP"/>
        <childnode refid="597" relation="public-inheritance">
        </childnode>
        <childnode refid="598" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="601">
        <label>std::enable_shared_from_this&lt; SerializedMDP&lt; oState, oAction &gt; &gt;</label>
      </node>
      <node id="600">
        <label>sdm::SolvableByHSVI&lt; oState, oAction &gt;</label>
        <link refid="classsdm_1_1SolvableByHSVI"/>
      </node>
      <node id="599">
        <label>sdm::SerializedMDP&lt; oState, oAction &gt;</label>
        <link refid="classsdm_1_1SerializedMDP"/>
        <childnode refid="600" relation="public-inheritance">
        </childnode>
        <childnode refid="601" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" line="31" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/serialized_mdp.hpp" bodystart="28" bodyend="67"/>
    <listofallmembers>
      <member refid="classsdm_1_1SerializedMDP_1a93be083ecda5ca308b68cc6f7b10ca21" prot="public" virt="non-virtual"><scope>sdm::SerializedMDP</scope><name>action_type</name></member>
      <member refid="classsdm_1_1SerializedMDP_1abb4d23882592a2e63760b425a6d6f482" prot="public" virt="virtual"><scope>sdm::SerializedMDP</scope><name>getActionSpaceAt</name></member>
      <member refid="classsdm_1_1SerializedMDP_1a9164529a533350b081078364233827a5" prot="public" virt="non-virtual"><scope>sdm::SerializedMDP</scope><name>getDiscount</name></member>
      <member refid="classsdm_1_1SerializedMDP_1ae9bbe5035970aa7b761dd4afa2df89e4" prot="public" virt="virtual"><scope>sdm::SerializedMDP</scope><name>getExpectedNextValue</name></member>
      <member refid="classsdm_1_1SerializedMDP_1a78bf890b9fdafb72728faa8f1e15f662" prot="public" virt="virtual"><scope>sdm::SerializedMDP</scope><name>getInitialState</name></member>
      <member refid="classsdm_1_1SerializedMDP_1a9becb9f1255595d2f6c4bc6786da06da" prot="public" virt="non-virtual"><scope>sdm::SerializedMDP</scope><name>getptr</name></member>
      <member refid="classsdm_1_1SerializedMDP_1ac42f1d8272df65e12a5933e73975cea6" prot="public" virt="virtual"><scope>sdm::SerializedMDP</scope><name>getReward</name></member>
      <member refid="classsdm_1_1SerializedMDP_1a0038a6571f657b6bdc6fc85442dfeb81" prot="public" virt="non-virtual"><scope>sdm::SerializedMDP</scope><name>getState</name></member>
      <member refid="classsdm_1_1SerializedMDP_1a1d5edceaf3f4b27e47e3da247acfa796" prot="public" virt="virtual"><scope>sdm::SerializedMDP</scope><name>getUnderlyingProblem</name></member>
      <member refid="classsdm_1_1SerializedMDP_1a1d3bd55486ddc7328c27d8e788a7fecd" prot="public" virt="virtual"><scope>sdm::SerializedMDP</scope><name>isSerialized</name></member>
      <member refid="classsdm_1_1SerializedMDP_1a20c4c2eaf257ee0e9239c89414fd88e3" prot="protected" virt="non-virtual"><scope>sdm::SerializedMDP</scope><name>mmdp_</name></member>
      <member refid="classsdm_1_1SerializedMDP_1a409a03b53d926e779dc88da54a0b8355" prot="public" virt="virtual"><scope>sdm::SerializedMDP</scope><name>nextState</name></member>
      <member refid="classsdm_1_1SerializedMDP_1a2f61e46a2e8054ca8373c0818e3422ee" prot="public" virt="non-virtual"><scope>sdm::SerializedMDP</scope><name>SerializedMDP</name></member>
      <member refid="classsdm_1_1SerializedMDP_1ac7a33d8721242f937f2f516a41627af3" prot="public" virt="non-virtual"><scope>sdm::SerializedMDP</scope><name>SerializedMDP</name></member>
      <member refid="classsdm_1_1SerializedMDP_1ae5d48787dc15108f8e8a4d97e999ea19" prot="public" virt="non-virtual"><scope>sdm::SerializedMDP</scope><name>state_type</name></member>
      <member refid="classsdm_1_1SerializedMDP_1a25c7588857269227bc1f492432a97876" prot="public" virt="non-virtual"><scope>sdm::SerializedMDP</scope><name>toBeliefMDP</name></member>
      <member refid="classsdm_1_1SerializedMDP_1adc7dea46985a3040a8fcea921ab2699c" prot="public" virt="non-virtual"><scope>sdm::SerializedMDP</scope><name>toMDP</name></member>
      <member refid="classsdm_1_1SolvableByHSVI_1a83b0c3e1bff936e75cc312575fb6538e" prot="public" virt="virtual"><scope>sdm::SerializedMDP</scope><name>~SolvableByHSVI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
