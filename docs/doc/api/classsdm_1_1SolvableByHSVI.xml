<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classsdm_1_1SolvableByHSVI" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>sdm::SolvableByHSVI</compoundname>
    <includes refid="types_8hpp" local="no">types.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>TState</declname>
        <defname>TState</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>TAction</declname>
        <defname>TAction</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsdm_1_1SolvableByHSVI_1a83b0c3e1bff936e75cc312575fb6538e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual sdm::SolvableByHSVI&lt; TState, TAction &gt;::~SolvableByHSVI</definition>
        <argsstring>()</argsstring>
        <name>~SolvableByHSVI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/solvable_by_hsvi.hpp" line="28" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/solvable_by_hsvi.hpp" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SolvableByHSVI_1ac0a1fff056c61d42da7fe9aad571771d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>TState</type>
        <definition>virtual TState sdm::SolvableByHSVI&lt; TState, TAction &gt;::getInitialState</definition>
        <argsstring>()=0</argsstring>
        <name>getInitialState</name>
        <reimplementedby refid="classsdm_1_1DiscreteMDP_1a0a34a503b8fc188f02c49ea1b5ee9ab4">getInitialState</reimplementedby>
        <reimplementedby refid="classsdm_1_1SerializedBeliefMDP_1a20675b619bbe11df4c8504e6fef3f0f4">getInitialState</reimplementedby>
        <reimplementedby refid="classsdm_1_1SerializedMDP_1a78bf890b9fdafb72728faa8f1e15f662">getInitialState</reimplementedby>
        <reimplementedby refid="classsdm_1_1BeliefMDP_1a3acabe7542033d41eec4e20c3914d08d">getInitialState</reimplementedby>
        <reimplementedby refid="classsdm_1_1SerializedOccupancyMDP_1a68f7a1a8fa7e62ccb22e7f17375815b2">getInitialState</reimplementedby>
        <reimplementedby refid="classsdm_1_1OccupancyMDP_1a06dcea9376c769ee86ec25c7220372fc">getInitialState</reimplementedby>
        <briefdescription>
<para>Get the initial state. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/solvable_by_hsvi.hpp" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SolvableByHSVI_1a6c4d6cfdb1211ed8a0a8a591f96cb551" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>TState</type>
        <definition>virtual TState sdm::SolvableByHSVI&lt; TState, TAction &gt;::nextState</definition>
        <argsstring>(const TState &amp;state, const TAction &amp;action, int t=0, HSVI&lt; TState, TAction &gt; *hsvi=nullptr) const =0</argsstring>
        <name>nextState</name>
        <reimplementedby refid="classsdm_1_1DiscreteMDP_1a2c435fcefb1c66e38c082bd0201e8217">nextState</reimplementedby>
        <reimplementedby refid="classsdm_1_1SerializedMDP_1a409a03b53d926e779dc88da54a0b8355">nextState</reimplementedby>
        <reimplementedby refid="classsdm_1_1BeliefMDP_1a0dff327986effa79a58e7678488ffd7d">nextState</reimplementedby>
        <reimplementedby refid="classsdm_1_1SerializedOccupancyMDP_1a244fec22fe085222e64eb6150128530c">nextState</reimplementedby>
        <reimplementedby refid="classsdm_1_1OccupancyMDP_1ab5e5b453076ed6ad60ff2654f3d2fcd5">nextState</reimplementedby>
        <param>
          <type>const TState &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const TAction &amp;</type>
          <declname>action</declname>
        </param>
        <param>
          <type>int</type>
          <declname>t</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classsdm_1_1HSVI" kindref="compound">HSVI</ref>&lt; TState, TAction &gt; *</type>
          <declname>hsvi</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Get the next occupancy state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>the occupancy state </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>the action state </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the timestep </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hsvi</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer on the algorithm that makes the call </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the next occupancy state </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/solvable_by_hsvi.hpp" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SolvableByHSVI_1a0534ed754224f9b7bc87edb08ba62d6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="classsdm_1_1DiscreteSpace" kindref="compound">DiscreteSpace</ref>&lt; TAction &gt; &gt;</type>
        <definition>virtual std::shared_ptr&lt;DiscreteSpace&lt;TAction&gt; &gt; sdm::SolvableByHSVI&lt; TState, TAction &gt;::getActionSpaceAt</definition>
        <argsstring>(const TState &amp;state)=0</argsstring>
        <name>getActionSpaceAt</name>
        <reimplementedby refid="classsdm_1_1DiscreteMDP_1a7eb9d6e0144f9766ba6493675ae043bc">getActionSpaceAt</reimplementedby>
        <reimplementedby refid="classsdm_1_1SerializedMDP_1abb4d23882592a2e63760b425a6d6f482">getActionSpaceAt</reimplementedby>
        <reimplementedby refid="classsdm_1_1BeliefMDP_1ad51df30303b85f709b9fe676f21a5579">getActionSpaceAt</reimplementedby>
        <reimplementedby refid="classsdm_1_1SerializedOccupancyMDP_1a08830b951da1c61bba6aecf914e1e990">getActionSpaceAt</reimplementedby>
        <reimplementedby refid="classsdm_1_1OccupancyMDP_1a701d5238ba576659783b971c1999f70a">getActionSpaceAt</reimplementedby>
        <param>
          <type>const TState &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Get the actions availables at a specific state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>the state </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the action space </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/solvable_by_hsvi.hpp" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SolvableByHSVI_1a02c997720580a7c9c49784addf3ffee0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double sdm::SolvableByHSVI&lt; TState, TAction &gt;::getReward</definition>
        <argsstring>(const TState &amp;state, const TAction &amp;action) const =0</argsstring>
        <name>getReward</name>
        <reimplementedby refid="classsdm_1_1DiscreteMDP_1a655e73a1435289c3b64e7f9876039d6d">getReward</reimplementedby>
        <reimplementedby refid="classsdm_1_1SerializedMDP_1ac42f1d8272df65e12a5933e73975cea6">getReward</reimplementedby>
        <reimplementedby refid="classsdm_1_1BeliefMDP_1ac75dd5042cde7576b1a84488345e0143">getReward</reimplementedby>
        <reimplementedby refid="classsdm_1_1SerializedOccupancyMDP_1ae9f49841d7699538ee922840db5f473d">getReward</reimplementedby>
        <reimplementedby refid="classsdm_1_1OccupancyMDP_1af338f34008cfbf1c26c0c9c76b0a12fe">getReward</reimplementedby>
        <param>
          <type>const TState &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const TAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
<para>Get the reward at a given occupancy state and occupancy action. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/solvable_by_hsvi.hpp" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SolvableByHSVI_1a8ef08843154d1145054256bd981a5b0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double sdm::SolvableByHSVI&lt; TState, TAction &gt;::getExpectedNextValue</definition>
        <argsstring>(ValueFunction&lt; TState, TAction &gt; *value_function, const TState &amp;state, const TAction &amp;action, int t=0) const =0</argsstring>
        <name>getExpectedNextValue</name>
        <reimplementedby refid="classsdm_1_1DiscreteMDP_1a062e2760ea16efb76d861c3735ceafb9">getExpectedNextValue</reimplementedby>
        <reimplementedby refid="classsdm_1_1SerializedMDP_1ae9bbe5035970aa7b761dd4afa2df89e4">getExpectedNextValue</reimplementedby>
        <reimplementedby refid="classsdm_1_1BeliefMDP_1a7bba08acb6d97e5a1400bc36226ff5f1">getExpectedNextValue</reimplementedby>
        <reimplementedby refid="classsdm_1_1SerializedOccupancyMDP_1a40c3234348616ff9058f6960115624f6">getExpectedNextValue</reimplementedby>
        <reimplementedby refid="classsdm_1_1OccupancyMDP_1a1ca580d4bfc44d8f1e89253db12fc767">getExpectedNextValue</reimplementedby>
        <param>
          <type><ref refid="classsdm_1_1ValueFunction" kindref="compound">ValueFunction</ref>&lt; TState, TAction &gt; *</type>
          <declname>value_function</declname>
        </param>
        <param>
          <type>const TState &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const TAction &amp;</type>
          <declname>action</declname>
        </param>
        <param>
          <type>int</type>
          <declname>t</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the expected next value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value_function</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer on the value function to use to perform the calculus. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>the state on which to evaluate the next expected value * </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/solvable_by_hsvi.hpp" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SolvableByHSVI_1a55a1920c31c0b74fa1edc954190ab820" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="structsdm_1_1WorldType" kindref="compound">WorldType</ref>&lt; TState, TAction &gt;::underlying_problem_type *</type>
        <definition>virtual WorldType&lt;TState, TAction&gt;::underlying_problem_type* sdm::SolvableByHSVI&lt; TState, TAction &gt;::getUnderlyingProblem</definition>
        <argsstring>()=0</argsstring>
        <name>getUnderlyingProblem</name>
        <reimplementedby refid="classsdm_1_1SerializedBeliefMDP_1a6485357eb9860dd452e9c29f32909258">getUnderlyingProblem</reimplementedby>
        <reimplementedby refid="classsdm_1_1SerializedMDP_1a1d5edceaf3f4b27e47e3da247acfa796">getUnderlyingProblem</reimplementedby>
        <reimplementedby refid="classsdm_1_1DiscreteMDP_1a036b888b048ded5fa6456de6cb25b50d">getUnderlyingProblem</reimplementedby>
        <reimplementedby refid="classsdm_1_1BeliefMDP_1a309af94963a37796e294b2a511767f87">getUnderlyingProblem</reimplementedby>
        <reimplementedby refid="classsdm_1_1SerializedOccupancyMDP_1a15e90b4c7f38226856ae8e575feae96d">getUnderlyingProblem</reimplementedby>
        <reimplementedby refid="classsdm_1_1OccupancyMDP_1aff2cc4862ab63c1f41ec740fd2c61c45">getUnderlyingProblem</reimplementedby>
        <briefdescription>
<para>Get the underlying problem. For instance the underlying DecPOMDP of the <ref refid="classsdm_1_1OccupancyMDP" kindref="compound">OccupancyMDP</ref> or the underlying POMDP of the current <ref refid="classsdm_1_1BeliefMDP" kindref="compound">BeliefMDP</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the underlying problem </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/solvable_by_hsvi.hpp" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1SolvableByHSVI_1aa99d7d6e88cbf175137ca5c4412f0d12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool sdm::SolvableByHSVI&lt; TState, TAction &gt;::isSerialized</definition>
        <argsstring>() const =0</argsstring>
        <name>isSerialized</name>
        <reimplementedby refid="classsdm_1_1SerializedBeliefMDP_1a9b82e25efd20a5c2e26b9c14ab4383d9">isSerialized</reimplementedby>
        <reimplementedby refid="classsdm_1_1SerializedMDP_1a1d3bd55486ddc7328c27d8e788a7fecd">isSerialized</reimplementedby>
        <reimplementedby refid="classsdm_1_1DiscreteMDP_1a14cb97ed07ad038b53d0382aaa16d0d2">isSerialized</reimplementedby>
        <reimplementedby refid="classsdm_1_1BeliefMDP_1a2b7b6bd0baacfbb5f86700e707d3ea24">isSerialized</reimplementedby>
        <reimplementedby refid="classsdm_1_1SerializedOccupancyMDP_1a6949c2b415d4f05292543749ef9d37d5">isSerialized</reimplementedby>
        <reimplementedby refid="classsdm_1_1OccupancyMDP_1af1129f27c535040f6b12258e4190fa6f">isSerialized</reimplementedby>
        <briefdescription>
<para>Check if the problem is serialized. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the problem is serialized. </para></simplesect>
<simplesect kind="return"><para>false if the problem is not serialized. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/solvable_by_hsvi.hpp" line="83" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Public interface that must be implemented by all transformed problems that can be solved using <ref refid="classsdm_1_1HSVI" kindref="compound">HSVI</ref> (i.e. beliefMDP, occupancyMDP, occupancyGame, etc). </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TState</parametername>
</parameternamelist>
<parameterdescription>
<para>The state type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TAction</parametername>
</parameternamelist>
<parameterdescription>
<para>The action type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/types.hpp" line="99" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/types.hpp" bodystart="99" bodyend="-1"/>
    <listofallmembers>
      <member refid="classsdm_1_1SolvableByHSVI_1a0534ed754224f9b7bc87edb08ba62d6a" prot="public" virt="pure-virtual"><scope>sdm::SolvableByHSVI</scope><name>getActionSpaceAt</name></member>
      <member refid="classsdm_1_1SolvableByHSVI_1a8ef08843154d1145054256bd981a5b0b" prot="public" virt="pure-virtual"><scope>sdm::SolvableByHSVI</scope><name>getExpectedNextValue</name></member>
      <member refid="classsdm_1_1SolvableByHSVI_1ac0a1fff056c61d42da7fe9aad571771d" prot="public" virt="pure-virtual"><scope>sdm::SolvableByHSVI</scope><name>getInitialState</name></member>
      <member refid="classsdm_1_1SolvableByHSVI_1a02c997720580a7c9c49784addf3ffee0" prot="public" virt="pure-virtual"><scope>sdm::SolvableByHSVI</scope><name>getReward</name></member>
      <member refid="classsdm_1_1SolvableByHSVI_1a55a1920c31c0b74fa1edc954190ab820" prot="public" virt="pure-virtual"><scope>sdm::SolvableByHSVI</scope><name>getUnderlyingProblem</name></member>
      <member refid="classsdm_1_1SolvableByHSVI_1aa99d7d6e88cbf175137ca5c4412f0d12" prot="public" virt="pure-virtual"><scope>sdm::SolvableByHSVI</scope><name>isSerialized</name></member>
      <member refid="classsdm_1_1SolvableByHSVI_1a6c4d6cfdb1211ed8a0a8a591f96cb551" prot="public" virt="pure-virtual"><scope>sdm::SolvableByHSVI</scope><name>nextState</name></member>
      <member refid="classsdm_1_1SolvableByHSVI_1a83b0c3e1bff936e75cc312575fb6538e" prot="public" virt="virtual"><scope>sdm::SolvableByHSVI</scope><name>~SolvableByHSVI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
