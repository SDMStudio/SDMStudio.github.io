<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classsdm_1_1State2OccupancyValueFunction" kind="class" language="C++" prot="public">
    <compoundname>sdm::State2OccupancyValueFunction</compoundname>
    <basecompoundref refid="classsdm_1_1BinaryFunction" prot="public" virt="non-virtual">sdm::BinaryFunction&lt; TOccupancyState, number, double &gt;</basecompoundref>
    <includes refid="state__2__occupancy__vf_8hpp" local="no">state_2_occupancy_vf.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename TState</type>
      </param>
      <param>
        <type>typename TOccupancyState</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classsdm_1_1State2OccupancyValueFunction_1a80380c98613d4b75b5059e88d9a414c1" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classsdm_1_1BinaryFunction" kindref="compound">BinaryFunction</ref>&lt; TState, <ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref>, double &gt; &gt;</type>
        <definition>std::shared_ptr&lt;BinaryFunction&lt;TState, number, double&gt; &gt; sdm::State2OccupancyValueFunction&lt; TState, TOccupancyState &gt;::mdp_vf_</definition>
        <argsstring></argsstring>
        <name>mdp_vf_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/value_function/state_2_occupancy_vf.hpp" line="12" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/value_function/state_2_occupancy_vf.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsdm_1_1State2OccupancyValueFunction_1a08d36e960cb09e4def0e8b498de66207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sdm::State2OccupancyValueFunction&lt; TState, TOccupancyState &gt;::State2OccupancyValueFunction</definition>
        <argsstring>(std::shared_ptr&lt; BinaryFunction&lt; TState, number, double &gt;&gt; vf)</argsstring>
        <name>State2OccupancyValueFunction</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classsdm_1_1BinaryFunction" kindref="compound">BinaryFunction</ref>&lt; TState, <ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref>, double &gt;&gt;</type>
          <declname>vf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/value_function/state_2_occupancy_vf.hpp" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1State2OccupancyValueFunction_1a6daf5dacb1986e09136727e6156f44bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>is_mdp</declname>
            <defname>is_mdp</defname>
            <defval>std::is_same&lt;TState, TOccupancyState&gt;::value</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; is_mdp, double &gt;</type>
        <definition>std::enable_if_t&lt;is_mdp, double&gt; sdm::State2OccupancyValueFunction&lt; TState, TOccupancyState &gt;::operator()</definition>
        <argsstring>(const TOccupancyState &amp;ostate, const number &amp;tau)</argsstring>
        <name>operator()</name>
        <reimplements refid="classsdm_1_1BinaryFunction_1a3d447385a4d0e78a88635b20615117c6">operator()</reimplements>
        <param>
          <type>const TOccupancyState &amp;</type>
          <declname>ostate</declname>
        </param>
        <param>
          <type>const <ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref> &amp;</type>
          <declname>tau</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/value_function/state_2_occupancy_vf.hpp" line="19" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1State2OccupancyValueFunction_1a27a4546ff65d8f6002843eea90659282" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>is_mdp</declname>
            <defname>is_mdp</defname>
            <defval>std::is_same&lt;TState, TOccupancyState&gt;::value</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!is_mdp, double &gt;</type>
        <definition>std::enable_if_t&lt;!is_mdp, double&gt; sdm::State2OccupancyValueFunction&lt; TState, TOccupancyState &gt;::operator()</definition>
        <argsstring>(const TOccupancyState &amp;ostate, const number &amp;tau)</argsstring>
        <name>operator()</name>
        <reimplements refid="classsdm_1_1BinaryFunction_1a3d447385a4d0e78a88635b20615117c6">operator()</reimplements>
        <param>
          <type>const TOccupancyState &amp;</type>
          <declname>ostate</declname>
        </param>
        <param>
          <type>const <ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref> &amp;</type>
          <declname>tau</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/value_function/state_2_occupancy_vf.hpp" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1State2OccupancyValueFunction_1a0b4a378f8e5d59533fe46d513f28b3f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double sdm::State2OccupancyValueFunction&lt; TState, TOccupancyState &gt;::operator()</definition>
        <argsstring>(const TOccupancyState &amp;ostate, const number &amp;tau)</argsstring>
        <name>operator()</name>
        <reimplements refid="classsdm_1_1BinaryFunction_1a3d447385a4d0e78a88635b20615117c6">operator()</reimplements>
        <param>
          <type>const TOccupancyState &amp;</type>
          <declname>ostate</declname>
        </param>
        <param>
          <type>const <ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref> &amp;</type>
          <declname>tau</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/value_function/state_2_occupancy_vf.hpp" line="25" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="642">
        <label>sdm::Function&lt; std::pair&lt; TOccupancyState, number &gt;, double &gt;</label>
        <link refid="classsdm_1_1Function"/>
      </node>
      <node id="641">
        <label>sdm::BinaryFunction&lt; TOccupancyState, number, double &gt;</label>
        <link refid="classsdm_1_1BinaryFunction"/>
        <childnode refid="642" relation="public-inheritance">
        </childnode>
      </node>
      <node id="640">
        <label>sdm::State2OccupancyValueFunction&lt; TState, TOccupancyState &gt;</label>
        <link refid="classsdm_1_1State2OccupancyValueFunction"/>
        <childnode refid="641" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="645">
        <label>sdm::Function&lt; std::pair&lt; TOccupancyState, number &gt;, double &gt;</label>
        <link refid="classsdm_1_1Function"/>
      </node>
      <node id="644">
        <label>sdm::BinaryFunction&lt; TOccupancyState, number, double &gt;</label>
        <link refid="classsdm_1_1BinaryFunction"/>
        <childnode refid="645" relation="public-inheritance">
        </childnode>
      </node>
      <node id="643">
        <label>sdm::State2OccupancyValueFunction&lt; TState, TOccupancyState &gt;</label>
        <link refid="classsdm_1_1State2OccupancyValueFunction"/>
        <childnode refid="644" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/value_function/state_2_occupancy_vf.hpp" line="10" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/value_function/state_2_occupancy_vf.hpp" bodystart="9" bodyend="26"/>
    <listofallmembers>
      <member refid="classsdm_1_1BinaryFunction_1a75d1ffc9a6fa593ad94d751e89503e6c" prot="public" virt="non-virtual"><scope>sdm::State2OccupancyValueFunction</scope><name>input_type</name></member>
      <member refid="classsdm_1_1State2OccupancyValueFunction_1a80380c98613d4b75b5059e88d9a414c1" prot="protected" virt="non-virtual"><scope>sdm::State2OccupancyValueFunction</scope><name>mdp_vf_</name></member>
      <member refid="classsdm_1_1State2OccupancyValueFunction_1a6daf5dacb1986e09136727e6156f44bc" prot="public" virt="virtual"><scope>sdm::State2OccupancyValueFunction</scope><name>operator()</name></member>
      <member refid="classsdm_1_1State2OccupancyValueFunction_1a27a4546ff65d8f6002843eea90659282" prot="public" virt="virtual"><scope>sdm::State2OccupancyValueFunction</scope><name>operator()</name></member>
      <member refid="classsdm_1_1State2OccupancyValueFunction_1a0b4a378f8e5d59533fe46d513f28b3f5" prot="public" virt="virtual"><scope>sdm::State2OccupancyValueFunction</scope><name>operator()</name></member>
      <member refid="classsdm_1_1BinaryFunction_1a70feb6f73b43d4bcb9263bba9e23963a" prot="public" virt="virtual" ambiguityscope="BinaryFunction&lt; TOccupancyState, number, double &gt;::"><scope>sdm::State2OccupancyValueFunction</scope><name>operator()</name></member>
      <member refid="classsdm_1_1BinaryFunction_1a1a5f0a4eba00f7e0153243cc2be273a3" prot="public" virt="non-virtual"><scope>sdm::State2OccupancyValueFunction</scope><name>output_type</name></member>
      <member refid="classsdm_1_1State2OccupancyValueFunction_1a08d36e960cb09e4def0e8b498de66207" prot="public" virt="non-virtual"><scope>sdm::State2OccupancyValueFunction</scope><name>State2OccupancyValueFunction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
