<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classsdm_1_1matrix" kind="class" language="C++" prot="public">
    <compoundname>sdm::matrix</compoundname>
    <includes refid="matrix_8hpp" local="no">matrix.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>mtype</declname>
        <defname>mtype</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>vtype</declname>
        <defname>vtype</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>value</declname>
        <defname>value</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classsdm_1_1matrix_1a2c8c112ada56f0ae5e21413de8f8ff50" prot="public" static="no" mutable="no">
        <type>mtype</type>
        <definition>mtype sdm::matrix&lt; mtype, vtype, value &gt;::container</definition>
        <argsstring></argsstring>
        <name>container</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TODO Make this attribute private, be aware that it might have been used somewhere else as a public attribute. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" line="111" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsdm_1_1matrix_1a7abdb718317b39a34fe02b342429ad97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sdm::matrix&lt; mtype, vtype, value &gt;::matrix</definition>
        <argsstring>()</argsstring>
        <name>matrix</name>
        <briefdescription>
<para>This constructor allocates an uninitialized matrix that holds zero elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" line="40" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.cpp" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1matrix_1a3fd1c9eef7679667ad6c603d5bcbe040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sdm::matrix&lt; mtype, vtype, value &gt;::matrix</definition>
        <argsstring>(size_t, size_t)</argsstring>
        <name>matrix</name>
        <param>
          <type><ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">size_t</ref></type>
          <defname>rows</defname>
        </param>
        <param>
          <type><ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">size_t</ref></type>
          <defname>cols</defname>
        </param>
        <briefdescription>
<para>This constructor Allocates an uninitialized matrix that holds @param1 rows of @param2 elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" line="46" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.cpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1matrix_1ac8e58b251574197c9ff3decca14303b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sdm::matrix&lt; mtype, vtype, value &gt;::~matrix</definition>
        <argsstring>()</argsstring>
        <name>~matrix</name>
        <briefdescription>
<para>This destructor destroies the matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" line="50" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.cpp" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1matrix_1a9dd129572bbbaaa1b40d39aa1cd76dad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsdm_1_1matrix" kindref="compound">matrix</ref></type>
        <definition>matrix&lt; mtype, vtype, value &gt; sdm::matrix&lt; mtype, vtype, value &gt;::transpose</definition>
        <argsstring>() const</argsstring>
        <name>transpose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" line="52" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.cpp" bodystart="83" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1matrix_1aec97be233add2cb16194d11bebb751a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sdm::matrix&lt; mtype, vtype, value &gt;::resize</definition>
        <argsstring>(size_t, size_t)</argsstring>
        <name>resize</name>
        <param>
          <type><ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">size_t</ref></type>
          <defname>rows</defname>
        </param>
        <param>
          <type><ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">size_t</ref></type>
          <defname>cols</defname>
        </param>
        <briefdescription>
<para>Reallocates a matrix to hold @param1 rows of @param2 elements. The existing elements of the matrix are preseved when specified. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" line="59" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.cpp" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1matrix_1aa5ec3f455b7922c5ced34c4ae7ae69c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>value &amp;</type>
        <definition>value &amp; sdm::matrix&lt; mtype, vtype, value &gt;::operator()</definition>
        <argsstring>(size_t, size_t)</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">size_t</ref></type>
          <defname>row</defname>
        </param>
        <param>
          <type><ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">size_t</ref></type>
          <defname>col</defname>
        </param>
        <briefdescription>
<para>Returns a reference of the @param1-th element in the @param2-th row. </para>        </briefdescription>
        <detaileddescription>
<para>Specialization of operator &apos;()&apos;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" line="66" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.cpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1matrix_1a802d715855701e14c1bcb85e44a552ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>value</type>
        <definition>value sdm::matrix&lt; mtype, vtype, value &gt;::operator()</definition>
        <argsstring>(size_t, size_t) const</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">size_t</ref></type>
          <defname>row</defname>
        </param>
        <param>
          <type><ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">size_t</ref></type>
          <defname>col</defname>
        </param>
        <briefdescription>
<para>Returns a value of the @param1-th element in the @param2-th row. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" line="73" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.cpp" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1matrix_1a3857efd556b346262f8fbe2b705594b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">size_t</ref></type>
        <definition>vector&lt; vtype, value &gt; sdm::matrix&lt; mtype, vtype, value &gt;::rows</definition>
        <argsstring>()</argsstring>
        <name>rows</name>
        <briefdescription>
<para>Returns the size_t of rows. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the row at a specified index.</para><para>Get Matrix size_t of rows</para><para><simplesect kind="return"><para>size_t</para></simplesect>
<simplesect kind="return"><para>vector&lt;vtype, value&gt; : the row vector. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" line="78" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.cpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1matrix_1a17dd271d342db553640cf203dc0f44fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsdm_1_1vector" kindref="compound">vector</ref>&lt; vtype, value &gt;</type>
        <definition>vector&lt; vtype, value &gt; sdm::matrix&lt; mtype, vtype, value &gt;::row</definition>
        <argsstring>(size_t)</argsstring>
        <name>row</name>
        <param>
          <type><ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">size_t</ref></type>
          <defname>i</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" line="83" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.cpp" bodystart="10" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1matrix_1aa4127b23ba9dae504bf6c5d0103ad976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">size_t</ref></type>
        <definition>size_t sdm::matrix&lt; mtype, vtype, value &gt;::cols</definition>
        <argsstring>()</argsstring>
        <name>cols</name>
        <briefdescription>
<para>Returns the size_t of cols. </para>        </briefdescription>
        <detaileddescription>
<para>Get Matrix size_t of columns</para><para><simplesect kind="return"><para>size_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" line="88" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.cpp" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1matrix_1afb2b49b7ebf712172868bfe9d3f4d95f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sdm::matrix&lt; mtype, vtype, value &gt;::compress</definition>
        <argsstring>()</argsstring>
        <name>compress</name>
        <briefdescription>
<para>Compress the matrix if possible. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" line="92" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.cpp" bodystart="18" bodyend="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classsdm_1_1matrix_1a4a892f11190b36e3c224274ad2ad1b65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const matrix &amp;arg)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classsdm_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" line="95" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="friend" id="classsdm_1_1matrix_1ab8577b5387e3313062c552da3bf9e7ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend const <ref refid="classsdm_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
        <definition>const matrix &amp; operator+=</definition>
        <argsstring>(matrix &amp;arg1, const matrix &amp;arg2)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classsdm_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>const <ref refid="classsdm_1_1matrix" kindref="compound">matrix</ref> &amp;</type>
          <declname>arg2</declname>
        </param>
        <briefdescription>
<para>Returns the sum of two matrices. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>matrix&amp;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" line="104" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" bodystart="104" bodyend="107"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" line="35" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/matrix.hpp" bodystart="35" bodyend="112"/>
    <listofallmembers>
      <member refid="classsdm_1_1matrix_1aa4127b23ba9dae504bf6c5d0103ad976" prot="public" virt="non-virtual"><scope>sdm::matrix</scope><name>cols</name></member>
      <member refid="classsdm_1_1matrix_1afb2b49b7ebf712172868bfe9d3f4d95f" prot="public" virt="non-virtual"><scope>sdm::matrix</scope><name>compress</name></member>
      <member refid="classsdm_1_1matrix_1a2c8c112ada56f0ae5e21413de8f8ff50" prot="public" virt="non-virtual"><scope>sdm::matrix</scope><name>container</name></member>
      <member refid="classsdm_1_1matrix_1a7abdb718317b39a34fe02b342429ad97" prot="public" virt="non-virtual"><scope>sdm::matrix</scope><name>matrix</name></member>
      <member refid="classsdm_1_1matrix_1a3fd1c9eef7679667ad6c603d5bcbe040" prot="public" virt="non-virtual"><scope>sdm::matrix</scope><name>matrix</name></member>
      <member refid="classsdm_1_1matrix_1aa5ec3f455b7922c5ced34c4ae7ae69c7" prot="public" virt="non-virtual"><scope>sdm::matrix</scope><name>operator()</name></member>
      <member refid="classsdm_1_1matrix_1a802d715855701e14c1bcb85e44a552ec" prot="public" virt="non-virtual"><scope>sdm::matrix</scope><name>operator()</name></member>
      <member refid="classsdm_1_1matrix_1ab8577b5387e3313062c552da3bf9e7ef" prot="public" virt="non-virtual"><scope>sdm::matrix</scope><name>operator+=</name></member>
      <member refid="classsdm_1_1matrix_1a4a892f11190b36e3c224274ad2ad1b65" prot="public" virt="non-virtual"><scope>sdm::matrix</scope><name>operator&lt;&lt;</name></member>
      <member refid="classsdm_1_1matrix_1aec97be233add2cb16194d11bebb751a7" prot="public" virt="non-virtual"><scope>sdm::matrix</scope><name>resize</name></member>
      <member refid="classsdm_1_1matrix_1a17dd271d342db553640cf203dc0f44fd" prot="public" virt="non-virtual"><scope>sdm::matrix</scope><name>row</name></member>
      <member refid="classsdm_1_1matrix_1a3857efd556b346262f8fbe2b705594b5" prot="public" virt="non-virtual"><scope>sdm::matrix</scope><name>rows</name></member>
      <member refid="classsdm_1_1matrix_1a9dd129572bbbaaa1b40d39aa1cd76dad" prot="public" virt="non-virtual"><scope>sdm::matrix</scope><name>transpose</name></member>
      <member refid="classsdm_1_1matrix_1ac8e58b251574197c9ff3decca14303b9" prot="public" virt="non-virtual"><scope>sdm::matrix</scope><name>~matrix</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
