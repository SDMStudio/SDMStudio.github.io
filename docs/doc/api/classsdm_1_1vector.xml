<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classsdm_1_1vector" kind="class" language="C++" prot="public">
    <compoundname>sdm::vector</compoundname>
    <includes refid="linear__algebra_2vector_8hpp" local="no">vector.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>type</declname>
        <defname>type</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>value</declname>
        <defname>value</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classsdm_1_1vector_1abd34a781dc92fa655fa7456c12971670" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">size_t</ref></type>
        <definition>size_t sdm::vector&lt; type, value &gt;::_size_</definition>
        <argsstring></argsstring>
        <name>_size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="35" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classsdm_1_1vector_1a94160579cd9bea6c21c74c22e77d9d60" prot="protected" static="no" mutable="no">
        <type>type</type>
        <definition>type sdm::vector&lt; type, value &gt;::container</definition>
        <argsstring></argsstring>
        <name>container</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TODO Make this attribute private, be aware that it might have been used somewhere else as a public attribute. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="39" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsdm_1_1vector_1a00bffb4d64eec25bcf956bbe8dca5063" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sdm::vector&lt; type, value &gt;::vector</definition>
        <argsstring>()</argsstring>
        <name>vector</name>
        <briefdescription>
<para>This constructor allocates an uninitialized vector that holds zero elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="44" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="10" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1a12625474328dbe38c39eefb9135d2777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sdm::vector&lt; type, value &gt;::vector</definition>
        <argsstring>(size_t)</argsstring>
        <name>vector</name>
        <param>
          <type><ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">size_t</ref></type>
          <defname>_size_</defname>
        </param>
        <briefdescription>
<para>This constructor allocates an uninitialized vector that holds &quot;size_t&quot; elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="49" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="21" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1ab56e85efd374967080593b2d85895557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sdm::vector&lt; type, value &gt;::vector</definition>
        <argsstring>(const vector &amp;)</argsstring>
        <name>vector</name>
        <param>
          <type>const <ref refid="classsdm_1_1vector" kindref="compound">vector</ref> &amp;</type>
          <defname>arg</defname>
        </param>
        <briefdescription>
<para>This is a copy constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>vector&amp; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="54" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1a831b4e567698edcad34a594522b47c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>sdm::vector&lt; type, value &gt;::~vector</definition>
        <argsstring>()</argsstring>
        <name>~vector</name>
        <briefdescription>
<para>This destructor destroies the vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="58" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1a6361c286020ef52d00469e5aa9cb9ac2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>value</type>
        <definition>value sdm::vector&lt; type, value &gt;::sum</definition>
        <argsstring>()</argsstring>
        <name>sum</name>
        <briefdescription>
<para>Returns the sum of all elements in the vector. </para>        </briefdescription>
        <detaileddescription>
<para>Sum of entries <ndash/> using methods from parent classes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="63" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1aed545b98aba29489f8a4591073b97cc4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>value</type>
        <definition>value sdm::vector&lt; type, value &gt;::norm_2</definition>
        <argsstring>() const</argsstring>
        <name>norm_2</name>
        <briefdescription>
<para>Returns the norm_2 of a vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="69" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="109" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1a13b00ff69173864d83aa0121caa22c66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>value</type>
        <definition>value sdm::vector&lt; type, value &gt;::norm_1</definition>
        <argsstring>() const</argsstring>
        <name>norm_1</name>
        <briefdescription>
<para>Returns the norm_1 of a vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="74" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="119" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1a288496a16df26de9fcbde55ab3a15467" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>value</type>
        <definition>value sdm::vector&lt; type, value &gt;::norm_sawtooth</definition>
        <argsstring>(const vector &amp;) const</argsstring>
        <name>norm_sawtooth</name>
        <param>
          <type>const <ref refid="classsdm_1_1vector" kindref="compound">vector</ref> &amp;</type>
          <defname>arg</defname>
        </param>
        <briefdescription>
<para>Returns the norm_sawtooth of a vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="79" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="129" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1a8a9dba22dde90039a7f9ee730a4ae67c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>value</type>
        <definition>value sdm::vector&lt; type, value &gt;::min</definition>
        <argsstring>() const</argsstring>
        <name>min</name>
        <briefdescription>
<para>Returns the min of all elements in the vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
Min of entries <ndash/> using methods from parent classes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="84" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1a9bac05ca19db6b2aeca9bf54ed5b0dc4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>value</type>
        <definition>value sdm::vector&lt; type, value &gt;::max</definition>
        <argsstring>() const</argsstring>
        <name>max</name>
        <briefdescription>
<para>Returns the max of all elements in the vector. </para>        </briefdescription>
        <detaileddescription>
<para>Max of entries <ndash/> using methods from parent classes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="90" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="104" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1a728416fad37fc350972b9e7835b00090" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">size_t</ref></type>
        <definition>size_t sdm::vector&lt; type, value &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="93" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1a8d9f5241c03b5ce71484ce0ec86f392f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sdm::vector&lt; type, value &gt;::resize</definition>
        <argsstring>(size_t)</argsstring>
        <name>resize</name>
        <param>
          <type><ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">size_t</ref></type>
          <defname>_size_</defname>
        </param>
        <briefdescription>
<para>Reallocates a vector to hold &quot;size_t&quot; elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="98" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1ab12707f115367d18957f04877f95d0b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sdm::vector&lt; type, value &gt;::init</definition>
        <argsstring>(value)</argsstring>
        <name>init</name>
        <param>
          <type>value</type>
          <defname>arg</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="103" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="53" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1ad6b87aa3a32f07077c57c790e411228f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classsdm_1_1vector" kindref="compound">vector</ref></type>
        <definition>vector&lt; type, value &gt; sdm::vector&lt; type, value &gt;::transpose</definition>
        <argsstring>() const</argsstring>
        <name>transpose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="105" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="45" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1aff4a47d1a2a51fc628b1597a002fad22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const type &amp;</type>
        <definition>const type &amp; sdm::vector&lt; type, value &gt;::getContainer</definition>
        <argsstring>() const</argsstring>
        <name>getContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="107" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="29" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1af669646ca618206a02d84f5b2598a512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sdm::vector&lt; type, value &gt;::setContainer</definition>
        <argsstring>(const type &amp;)</argsstring>
        <name>setContainer</name>
        <param>
          <type>const type &amp;</type>
          <defname>container</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="109" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="34" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1ab532253285aad88dcc1cb702228eaf46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>value &amp;</type>
        <definition>value &amp; sdm::vector&lt; type, value &gt;::operator[]</definition>
        <argsstring>(size_t)</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">size_t</ref></type>
          <defname>idx</defname>
        </param>
        <briefdescription>
<para>Returns a reference of the i-th element. </para>        </briefdescription>
        <detaileddescription>
<para>Array subscript operator &apos;[]&apos;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="115" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1a92d9225773b0e6ee7fbcac30cdcb4b3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>value</type>
        <definition>value sdm::vector&lt; type, value &gt;::operator[]</definition>
        <argsstring>(size_t) const</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">size_t</ref></type>
          <defname>idx</defname>
        </param>
        <briefdescription>
<para>Returns a value of the i-th element. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_t</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="121" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="141" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1a48d0d618b724ebced86b88c2484e8945" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>value</type>
        <definition>value operator^</definition>
        <argsstring>(const vector&lt; type, value &gt; &amp;) const</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classsdm_1_1vector" kindref="compound">vector</ref>&lt; type, value &gt; &amp;</type>
          <defname>arg</defname>
        </param>
        <briefdescription>
<para>Returns the scalar product of the two vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>vector&lt;type, value&gt;&amp; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>vector&lt;type, value&gt;&amp; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="179" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classsdm_1_1vector_1aaef77b623e6a331b326ca9fbfdfeceb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const vector&lt; type, value &gt; &amp;) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classsdm_1_1vector" kindref="compound">vector</ref>&lt; type, value &gt; &amp;</type>
          <defname>arg</defname>
        </param>
        <briefdescription>
<para>Returns true if both vectors are equals and false otherwise. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>vector&lt;type, value&gt;&amp; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>vector&lt;type, value&gt;&amp; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="186" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.cpp" bodystart="71" bodyend="73"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classsdm_1_1vector_1a6142cb7e7512e9c37aae4adeb54c6cdd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend const <ref refid="classsdm_1_1vector" kindref="compound">vector</ref> &amp;</type>
        <definition>vector&lt; type, value &gt; &amp; operator/=</definition>
        <argsstring>(vector &amp;arg1, const value &amp;arg2)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="classsdm_1_1vector" kindref="compound">vector</ref> &amp;</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>const value &amp;</type>
          <declname>arg2</declname>
        </param>
        <briefdescription>
<para>Returns the vector normalized by a scalar. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>vector&lt;type, value&gt;&amp; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>value&amp; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vector&lt;type, value&gt;&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="128" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" bodystart="128" bodyend="132"/>
      </memberdef>
      <memberdef kind="friend" id="classsdm_1_1vector_1a120dd09a96f0d5c7121060ee5b6d43ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend <ref refid="classsdm_1_1vector" kindref="compound">vector</ref></type>
        <definition>bool operator*</definition>
        <argsstring>(const value &amp;arg1, const vector &amp;arg2)</argsstring>
        <name>operator*</name>
        <param>
          <type>const value &amp;</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>const <ref refid="classsdm_1_1vector" kindref="compound">vector</ref> &amp;</type>
          <declname>arg2</declname>
        </param>
        <briefdescription>
<para>Returns the product of a scalar with a vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>value&amp; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>vector&lt;type, value&gt;&amp; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vector&lt;type, value&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="139" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" bodystart="139" bodyend="143"/>
      </memberdef>
      <memberdef kind="friend" id="classsdm_1_1vector_1a1fe8ec5c36bfe7362fcc6c735530ee2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const vector &amp;arg)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classsdm_1_1vector" kindref="compound">vector</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="145" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" bodystart="145" bodyend="152"/>
      </memberdef>
      <memberdef kind="friend" id="classsdm_1_1vector_1af97f3ec560dfc0e7b19ea5c62b8419df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend const <ref refid="classsdm_1_1vector" kindref="compound">vector</ref> &amp;</type>
        <definition>vector&lt; type, value &gt; &amp; operator+=</definition>
        <argsstring>(vector &amp;arg1, const vector &amp;arg2)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classsdm_1_1vector" kindref="compound">vector</ref> &amp;</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>const <ref refid="classsdm_1_1vector" kindref="compound">vector</ref> &amp;</type>
          <declname>arg2</declname>
        </param>
        <briefdescription>
<para>Returns the sum of two vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>vector&lt;type, value&gt;&amp; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>vector&lt;type, value&gt;&amp; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vector&lt;type, value&gt;&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="159" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="friend" id="classsdm_1_1vector_1a279fc6f541d4777a734c1ea4ba3bad3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend const <ref refid="classsdm_1_1vector" kindref="compound">vector</ref> &amp;</type>
        <definition>const vector&amp; operator-=</definition>
        <argsstring>(vector &amp;arg1, const vector &amp;arg2)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="classsdm_1_1vector" kindref="compound">vector</ref> &amp;</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>const <ref refid="classsdm_1_1vector" kindref="compound">vector</ref> &amp;</type>
          <declname>arg2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="169" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" bodystart="169" bodyend="172"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" line="33" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/linear_algebra/vector.hpp" bodystart="33" bodyend="187"/>
    <listofallmembers>
      <member refid="classsdm_1_1vector_1abd34a781dc92fa655fa7456c12971670" prot="protected" virt="non-virtual"><scope>sdm::vector</scope><name>_size_</name></member>
      <member refid="classsdm_1_1vector_1a94160579cd9bea6c21c74c22e77d9d60" prot="protected" virt="non-virtual"><scope>sdm::vector</scope><name>container</name></member>
      <member refid="classsdm_1_1vector_1aff4a47d1a2a51fc628b1597a002fad22" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>getContainer</name></member>
      <member refid="classsdm_1_1vector_1ab12707f115367d18957f04877f95d0b8" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>init</name></member>
      <member refid="classsdm_1_1vector_1a9bac05ca19db6b2aeca9bf54ed5b0dc4" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>max</name></member>
      <member refid="classsdm_1_1vector_1a8a9dba22dde90039a7f9ee730a4ae67c" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>min</name></member>
      <member refid="classsdm_1_1vector_1a13b00ff69173864d83aa0121caa22c66" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>norm_1</name></member>
      <member refid="classsdm_1_1vector_1aed545b98aba29489f8a4591073b97cc4" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>norm_2</name></member>
      <member refid="classsdm_1_1vector_1a288496a16df26de9fcbde55ab3a15467" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>norm_sawtooth</name></member>
      <member refid="classsdm_1_1vector_1a120dd09a96f0d5c7121060ee5b6d43ec" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>operator*</name></member>
      <member refid="classsdm_1_1vector_1af97f3ec560dfc0e7b19ea5c62b8419df" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>operator+=</name></member>
      <member refid="classsdm_1_1vector_1a279fc6f541d4777a734c1ea4ba3bad3a" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>operator-=</name></member>
      <member refid="classsdm_1_1vector_1a6142cb7e7512e9c37aae4adeb54c6cdd" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>operator/=</name></member>
      <member refid="classsdm_1_1vector_1a1fe8ec5c36bfe7362fcc6c735530ee2d" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>operator&lt;&lt;</name></member>
      <member refid="classsdm_1_1vector_1aaef77b623e6a331b326ca9fbfdfeceb1" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>operator==</name></member>
      <member refid="classsdm_1_1vector_1ab532253285aad88dcc1cb702228eaf46" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>operator[]</name></member>
      <member refid="classsdm_1_1vector_1a92d9225773b0e6ee7fbcac30cdcb4b3d" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>operator[]</name></member>
      <member refid="classsdm_1_1vector_1a48d0d618b724ebced86b88c2484e8945" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>operator^</name></member>
      <member refid="classsdm_1_1vector_1a8d9f5241c03b5ce71484ce0ec86f392f" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>resize</name></member>
      <member refid="classsdm_1_1vector_1af669646ca618206a02d84f5b2598a512" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>setContainer</name></member>
      <member refid="classsdm_1_1vector_1a728416fad37fc350972b9e7835b00090" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>size</name></member>
      <member refid="classsdm_1_1vector_1a6361c286020ef52d00469e5aa9cb9ac2" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>sum</name></member>
      <member refid="classsdm_1_1vector_1ad6b87aa3a32f07077c57c790e411228f" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>transpose</name></member>
      <member refid="classsdm_1_1vector_1a00bffb4d64eec25bcf956bbe8dca5063" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>vector</name></member>
      <member refid="classsdm_1_1vector_1a12625474328dbe38c39eefb9135d2777" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>vector</name></member>
      <member refid="classsdm_1_1vector_1ab56e85efd374967080593b2d85895557" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>vector</name></member>
      <member refid="classsdm_1_1vector_1a831b4e567698edcad34a594522b47c64" prot="public" virt="non-virtual"><scope>sdm::vector</scope><name>~vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
