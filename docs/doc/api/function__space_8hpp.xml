<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="function__space_8hpp" kind="file" language="C++">
    <compoundname>function_space.hpp</compoundname>
    <includes local="no">vector</includes>
    <includes refid="discrete__space_8hpp" local="no">sdm/core/space/discrete_space.hpp</includes>
    <includes refid="variations_8hpp" local="no">sdm/utils/decision_rules/variations.hpp</includes>
    <includes refid="types_8hpp" local="no">sdm/types.hpp</includes>
    <includedby refid="spaces_8hpp" local="no">/home/dalbert/Documents/SDMStudio/sdms/src/sdm/spaces.hpp</includedby>
    <incdepgraph>
      <node id="599">
        <label>sdm/core/space/discrete_space.tpp</label>
      </node>
      <node id="585">
        <label>boost/bimap.hpp</label>
      </node>
      <node id="592">
        <label>string</label>
      </node>
      <node id="600">
        <label>sdm/utils/decision_rules/variations.hpp</label>
        <link refid="variations_8hpp"/>
        <childnode refid="583" relation="include">
        </childnode>
        <childnode refid="586" relation="include">
        </childnode>
        <childnode refid="601" relation="include">
        </childnode>
      </node>
      <node id="596">
        <label>sdm/core/function.hpp</label>
        <link refid="function_8hpp"/>
      </node>
      <node id="597">
        <label>sdm/utils/struct/vector.hpp</label>
        <link refid="struct_2vector_8hpp"/>
        <childnode refid="588" relation="include">
        </childnode>
        <childnode refid="583" relation="include">
        </childnode>
      </node>
      <node id="594">
        <label>fstream</label>
      </node>
      <node id="601">
        <label>sdm/utils/decision_rules/variations.tpp</label>
      </node>
      <node id="584">
        <label>sdm/core/space/discrete_space.hpp</label>
        <link refid="discrete__space_8hpp"/>
        <childnode refid="583" relation="include">
        </childnode>
        <childnode refid="585" relation="include">
        </childnode>
        <childnode refid="586" relation="include">
        </childnode>
        <childnode refid="590" relation="include">
        </childnode>
        <childnode refid="598" relation="include">
        </childnode>
        <childnode refid="599" relation="include">
        </childnode>
      </node>
      <node id="583">
        <label>vector</label>
      </node>
      <node id="598">
        <label>sdm/core/space/space.hpp</label>
        <link refid="space_8hpp"/>
        <childnode refid="583" relation="include">
        </childnode>
        <childnode refid="585" relation="include">
        </childnode>
        <childnode refid="586" relation="include">
        </childnode>
      </node>
      <node id="595">
        <label>sstream</label>
      </node>
      <node id="590">
        <label>sdm/core/joint.hpp</label>
        <link refid="joint_8hpp"/>
        <childnode refid="583" relation="include">
        </childnode>
        <childnode refid="586" relation="include">
        </childnode>
        <childnode refid="591" relation="include">
        </childnode>
        <childnode refid="596" relation="include">
        </childnode>
        <childnode refid="597" relation="include">
        </childnode>
      </node>
      <node id="593">
        <label>cstdlib</label>
      </node>
      <node id="588">
        <label>iostream</label>
      </node>
      <node id="587">
        <label>cstddef</label>
      </node>
      <node id="591">
        <label>sdm/tools.hpp</label>
        <link refid="tools_8hpp"/>
        <childnode refid="592" relation="include">
        </childnode>
        <childnode refid="593" relation="include">
        </childnode>
        <childnode refid="594" relation="include">
        </childnode>
        <childnode refid="595" relation="include">
        </childnode>
        <childnode refid="588" relation="include">
        </childnode>
      </node>
      <node id="589">
        <label>unordered_map</label>
      </node>
      <node id="582">
        <label>/home/dalbert/Documents/SDMStudio/sdms/src/sdm/core/space/function_space.hpp</label>
        <link refid="function__space_8hpp"/>
        <childnode refid="583" relation="include">
        </childnode>
        <childnode refid="584" relation="include">
        </childnode>
        <childnode refid="600" relation="include">
        </childnode>
        <childnode refid="586" relation="include">
        </childnode>
      </node>
      <node id="586">
        <label>sdm/types.hpp</label>
        <link refid="types_8hpp"/>
        <childnode refid="587" relation="include">
        </childnode>
        <childnode refid="588" relation="include">
        </childnode>
        <childnode refid="589" relation="include">
        </childnode>
        <childnode refid="585" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="603">
        <label>/home/dalbert/Documents/SDMStudio/sdms/src/sdm/spaces.hpp</label>
        <link refid="spaces_8hpp"/>
        <childnode refid="604" relation="include">
        </childnode>
      </node>
      <node id="604">
        <label>/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/base/interactive_world_base.hpp</label>
        <link refid="interactive__world__base_8hpp"/>
      </node>
      <node id="602">
        <label>/home/dalbert/Documents/SDMStudio/sdms/src/sdm/core/space/function_space.hpp</label>
        <link refid="function__space_8hpp"/>
        <childnode refid="603" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classsdm_1_1FunctionSpace" prot="public">sdm::FunctionSpace</innerclass>
    <innernamespace refid="namespacesdm">sdm</innernamespace>
    <briefdescription>
<para>File for discrete function space. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>David Albert (<ulink url="mailto:david.albert@insa-lyon.fr">david.albert@insa-lyon.fr</ulink>) </para></simplesect>
<simplesect kind="version"><para>1.0 </para></simplesect>
<simplesect kind="date"><para>01/02/2021</para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2021 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="discrete__space_8hpp" kindref="compound">sdm/core/space/discrete_space.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="variations_8hpp" kindref="compound">sdm/utils/decision_rules/variations.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="types_8hpp" kindref="compound">sdm/types.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesdm" kindref="compound">sdm</ref></highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TFunction&gt;</highlight></codeline>
<codeline lineno="27" refid="classsdm_1_1FunctionSpace" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsdm_1_1FunctionSpace" kindref="compound">FunctionSpace</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classsdm_1_1DiscreteSpace" kindref="compound">DiscreteSpace</ref>&lt;TFunction&gt;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="classsdm_1_1FunctionSpace_1acc6c12dd4236a85d8d32ee8846c72342" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::bimaps::bimap&lt;number,<sp/>TFunction&gt;<sp/><ref refid="classsdm_1_1FunctionSpace_1acc6c12dd4236a85d8d32ee8846c72342" kindref="member">funct_bimap</ref>;</highlight></codeline>
<codeline lineno="32" refid="classsdm_1_1FunctionSpace_1a2f6486e0297a09e37623cbffee05917b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>funct_bimap::value_type<sp/><ref refid="classsdm_1_1FunctionSpace_1a2f6486e0297a09e37623cbffee05917b" kindref="member">funct_bimap_value</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classsdm_1_1FunctionSpace_1a57c1e231dca35d097222a9fb924146ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classsdm_1_1FunctionSpace_1a57c1e231dca35d097222a9fb924146ad" kindref="member">value_type</ref><sp/>=<sp/>TFunction;</highlight></codeline>
<codeline lineno="35" refid="classsdm_1_1FunctionSpace_1a3b599b040c1c7e404611a6777b7fe179" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classsdm_1_1FunctionSpace_1a3b599b040c1c7e404611a6777b7fe179" kindref="member">input_type</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TFunction::input_type;</highlight></codeline>
<codeline lineno="36" refid="classsdm_1_1FunctionSpace_1aa34fc8c0cc811bbe234970ad67adde69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classsdm_1_1FunctionSpace_1aa34fc8c0cc811bbe234970ad67adde69" kindref="member">output_type</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TFunction::output_type;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="classsdm_1_1FunctionSpace_1a1c47fe9547153d16fa3a711bf9d974c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classsdm_1_1DiscreteSpace" kindref="compound">input_space</ref><sp/>=<sp/><ref refid="classsdm_1_1DiscreteSpace" kindref="compound">DiscreteSpace&lt;input_type&gt;</ref>;</highlight></codeline>
<codeline lineno="39" refid="classsdm_1_1FunctionSpace_1ae4fa9d8f8c04d76e45188e7e22bf8a7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classsdm_1_1DiscreteSpace" kindref="compound">output_space</ref><sp/>=<sp/><ref refid="classsdm_1_1DiscreteSpace" kindref="compound">DiscreteSpace&lt;output_type&gt;</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="classsdm_1_1FunctionSpace_1a769f68b5841fa693567e9b523f27e1c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsdm_1_1DiscreteSpace" kindref="compound">input_space</ref><sp/><ref refid="classsdm_1_1FunctionSpace_1a769f68b5841fa693567e9b523f27e1c6" kindref="member">input_space_</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="classsdm_1_1FunctionSpace_1ac2eedea6baf5b05f10d1aeb30c3307f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;output_space&gt;<sp/><ref refid="classsdm_1_1FunctionSpace_1ac2eedea6baf5b05f10d1aeb30c3307f7" kindref="member">output_space_</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52" refid="classsdm_1_1FunctionSpace_1a7aedb301174bcbbddbcecfe3b0aaf56c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsdm_1_1FunctionSpace_1a7aedb301174bcbbddbcecfe3b0aaf56c" kindref="member">FunctionSpace</ref>(<ref refid="classsdm_1_1DiscreteSpace" kindref="compound">input_space</ref><sp/>input_sp,<sp/><ref refid="classsdm_1_1DiscreteSpace" kindref="compound">output_space</ref><sp/>output_sp)<sp/>:<sp/>input_space_(input_sp),<sp/>output_space_({output_sp})</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="classsdm_1_1FunctionSpace_1a557e023bcba9ba27d8f73fd19ef5dbe6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsdm_1_1FunctionSpace_1a557e023bcba9ba27d8f73fd19ef5dbe6" kindref="member">FunctionSpace</ref>(std::vector&lt;input_type&gt;<sp/>possible_inputs,<sp/>std::vector&lt;output_type&gt;<sp/>possible_outputs)<sp/>:<sp/>input_space_(possible_inputs)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;output_space_.push_back(<ref refid="classsdm_1_1FunctionSpace_1ae4fa9d8f8c04d76e45188e7e22bf8a7a" kindref="member">output_space</ref>(possible_outputs));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="classsdm_1_1FunctionSpace_1a7a5aa6bdc30dab5bebc80d9420f6a71f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsdm_1_1FunctionSpace_1a7a5aa6bdc30dab5bebc80d9420f6a71f" kindref="member">FunctionSpace</ref>(<ref refid="classsdm_1_1DiscreteSpace" kindref="compound">input_space</ref><sp/>input_sp,<sp/>std::vector&lt;output_space&gt;<sp/>output_sps)<sp/>:<sp/>input_space_(input_sp),<sp/>output_space_(output_sps)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(input_sp.getNumElements()<sp/>==<sp/>output_sps.size());</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classsdm_1_1FunctionSpace_1a1ec9063df99843de0257c8e64ce50788" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsdm_1_1FunctionSpace_1a1ec9063df99843de0257c8e64ce50788" kindref="member">FunctionSpace</ref>(std::vector&lt;input_type&gt;<sp/>possible_inputs,<sp/>std::vector&lt;std::vector&lt;output_type&gt;&gt;<sp/>possible_outputs)<sp/>:<sp/>input_space_(possible_inputs)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(possible_inputs.size()<sp/>==<sp/>possible_outputs.size());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;v<sp/>:<sp/>possible_outputs)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;output_space_.push_back(<ref refid="classsdm_1_1FunctionSpace_1ae4fa9d8f8c04d76e45188e7e22bf8a7a" kindref="member">output_space</ref>(v));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="classsdm_1_1FunctionSpace_1ad6e14aca75f98f3ea9a844880eb66e51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TFunction&gt;<sp/><ref refid="classsdm_1_1FunctionSpace_1ad6e14aca75f98f3ea9a844880eb66e51" kindref="member">getAll</ref>()</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(this-&gt;output_space_.size()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="classsdm_1_1DiscreteSpace_1a925e61c7f266a9a5845856ab02f5d8db" kindref="member">all_items_</ref>.empty())</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;output_type&gt;&gt;<sp/>tmp;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="namespacesdm_1afd54d1d7100c999633af5e7bda412b78" kindref="member">std::size_t</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>input_space_.<ref refid="classsdm_1_1DiscreteSpace_1a2686886befc494fa3039ceaf662a6984" kindref="member">getAll</ref>().size();<sp/>i++)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;output_space_.size()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp.push_back(this-&gt;output_space_[0].<ref refid="classsdm_1_1FunctionSpace_1ad6e14aca75f98f3ea9a844880eb66e51" kindref="member">getAll</ref>());</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp.push_back(this-&gt;output_space_[i].<ref refid="classsdm_1_1FunctionSpace_1ad6e14aca75f98f3ea9a844880eb66e51" kindref="member">getAll</ref>());</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsdm_1_1Variations" kindref="compound">Variations&lt;TFunction&gt;</ref><sp/>funct_generator(input_space_.<ref refid="classsdm_1_1DiscreteSpace_1a2686886befc494fa3039ceaf662a6984" kindref="member">getAll</ref>(),<sp/>tmp);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref><sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>funct_generator.begin();<sp/>it<sp/>!=<sp/>funct_generator.end();<sp/>it<sp/>=<sp/>funct_generator.next())</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classsdm_1_1DiscreteSpace_1a925e61c7f266a9a5845856ab02f5d8db" kindref="member">all_items_</ref>.insert(<ref refid="classsdm_1_1FunctionSpace_1a2f6486e0297a09e37623cbffee05917b" kindref="member">funct_bimap_value</ref>(idx,<sp/>*it));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx++;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this-&gt;all_items_.push_back(*it);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classsdm_1_1DiscreteSpace_1a2629ceba1002b2e92d3288009ea505e8" kindref="member">num_items_</ref><sp/>=<sp/>this-&gt;<ref refid="classsdm_1_1DiscreteSpace_1a925e61c7f266a9a5845856ab02f5d8db" kindref="member">all_items_</ref>.size();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsdm_1_1DiscreteSpace_1a2686886befc494fa3039ceaf662a6984" kindref="member">DiscreteSpace&lt;TFunction&gt;::getAll</ref>();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>sdm</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/core/space/function_space.hpp"/>
  </compounddef>
</doxygen>
