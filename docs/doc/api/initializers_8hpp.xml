<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="initializers_8hpp" kind="file" language="C++">
    <compoundname>initializers.hpp</compoundname>
    <includes local="no">map</includes>
    <includes local="no">boost/bind.hpp</includes>
    <includes local="no">boost/function.hpp</includes>
    <includes refid="struct_2vector_8hpp" local="no">sdm/utils/struct/vector.hpp</includes>
    <includes refid="initializer_8hpp" local="no">sdm/utils/value_function/initializer.hpp</includes>
    <includes refid="mdp__initializer_8hpp" local="no">sdm/utils/value_function/initializer/mdp_initializer.hpp</includes>
    <includes refid="pomdp__initializer_8hpp" local="no">sdm/utils/value_function/initializer/pomdp_initializer.hpp</includes>
    <includedby refid="algorithms_8hpp" local="no">/home/dalbert/Documents/SDMStudio/sdms/src/sdm/algorithms.hpp</includedby>
    <incdepgraph>
      <node id="3328">
        <label>locale</label>
      </node>
      <node id="3329">
        <label>fmt/format.h</label>
      </node>
      <node id="3313">
        <label>assert.h</label>
      </node>
      <node id="3302">
        <label>sdm/algorithms/hsvi.hpp</label>
        <link refid="hsvi_8hpp"/>
        <childnode refid="3303" relation="include">
        </childnode>
        <childnode refid="3304" relation="include">
        </childnode>
        <childnode refid="3308" relation="include">
        </childnode>
        <childnode refid="3309" relation="include">
        </childnode>
        <childnode refid="3323" relation="include">
        </childnode>
        <childnode refid="3327" relation="include">
        </childnode>
        <childnode refid="3332" relation="include">
        </childnode>
      </node>
      <node id="3307">
        <label>boost/bimap.hpp</label>
      </node>
      <node id="3308">
        <label>sdm/public/algorithm.hpp</label>
        <link refid="algorithm_8hpp"/>
      </node>
      <node id="3319">
        <label>cmath</label>
      </node>
      <node id="3334">
        <label>sdm/utils/value_function/state_2_occupancy_vf.tpp</label>
      </node>
      <node id="3303">
        <label>string</label>
      </node>
      <node id="3317">
        <label>sdm/utils/linear_algebra/sdms_vector.tpp</label>
      </node>
      <node id="3326">
        <label>sdm/utils/value_function/value_function.tpp</label>
      </node>
      <node id="3294">
        <label>map</label>
      </node>
      <node id="3323">
        <label>sdm/utils/value_function/value_function.hpp</label>
        <link refid="value__function_8hpp"/>
        <childnode refid="3324" relation="include">
        </childnode>
        <childnode refid="3325" relation="include">
        </childnode>
        <childnode refid="3314" relation="include">
        </childnode>
        <childnode refid="3326" relation="include">
        </childnode>
      </node>
      <node id="3325">
        <label>sdm/core/function.hpp</label>
        <link refid="function_8hpp"/>
      </node>
      <node id="3297">
        <label>sdm/utils/struct/vector.hpp</label>
        <link refid="struct_2vector_8hpp"/>
        <childnode refid="3298" relation="include">
        </childnode>
        <childnode refid="3299" relation="include">
        </childnode>
      </node>
      <node id="3318">
        <label>sdm/utils/linear_algebra/mapped_vector.hpp</label>
        <link refid="mapped__vector_8hpp"/>
        <childnode refid="3306" relation="include">
        </childnode>
        <childnode refid="3319" relation="include">
        </childnode>
        <childnode refid="3303" relation="include">
        </childnode>
        <childnode refid="3299" relation="include">
        </childnode>
        <childnode refid="3298" relation="include">
        </childnode>
        <childnode refid="3313" relation="include">
        </childnode>
        <childnode refid="3304" relation="include">
        </childnode>
        <childnode refid="3314" relation="include">
        </childnode>
        <childnode refid="3320" relation="include">
        </childnode>
      </node>
      <node id="3331">
        <label>fstream</label>
      </node>
      <node id="3335">
        <label>sdm/utils/value_function/initializer/mdp_initializer.hpp</label>
        <link refid="mdp__initializer_8hpp"/>
        <childnode refid="3300" relation="include">
        </childnode>
        <childnode refid="3336" relation="include">
        </childnode>
      </node>
      <node id="3296">
        <label>boost/function.hpp</label>
      </node>
      <node id="3311">
        <label>boost/numeric/ublas/vector.hpp</label>
      </node>
      <node id="3312">
        <label>boost/numeric/ublas/io.hpp</label>
      </node>
      <node id="3320">
        <label>sdm/utils/linear_algebra/mapped_vector.tpp</label>
      </node>
      <node id="3299">
        <label>vector</label>
      </node>
      <node id="3336">
        <label>sdm/utils/value_function/initializer/mdp_initializer.tpp</label>
      </node>
      <node id="3310">
        <label>sdm/utils/linear_algebra/sdms_vector.hpp</label>
        <link refid="sdms__vector_8hpp"/>
        <childnode refid="3311" relation="include">
        </childnode>
        <childnode refid="3312" relation="include">
        </childnode>
        <childnode refid="3313" relation="include">
        </childnode>
        <childnode refid="3314" relation="include">
        </childnode>
        <childnode refid="3317" relation="include">
        </childnode>
      </node>
      <node id="3322">
        <label>sdm/utils/struct/pair.hpp</label>
        <link refid="pair_8hpp"/>
        <childnode refid="3298" relation="include">
        </childnode>
        <childnode refid="3297" relation="include">
        </childnode>
      </node>
      <node id="3309">
        <label>sdm/core/state/state.hpp</label>
        <link refid="state_8hpp"/>
        <childnode refid="3304" relation="include">
        </childnode>
        <childnode refid="3310" relation="include">
        </childnode>
        <childnode refid="3318" relation="include">
        </childnode>
        <childnode refid="3321" relation="include">
        </childnode>
      </node>
      <node id="3316">
        <label>sstream</label>
      </node>
      <node id="3338">
        <label>sdm/utils/value_function/initializer/pomdp_initializer.tpp</label>
      </node>
      <node id="3327">
        <label>sdm/utils/logging/logger.hpp</label>
        <link refid="logger_8hpp"/>
        <childnode refid="3298" relation="include">
        </childnode>
        <childnode refid="3328" relation="include">
        </childnode>
        <childnode refid="3329" relation="include">
        </childnode>
        <childnode refid="3330" relation="include">
        </childnode>
      </node>
      <node id="3332">
        <label>sdm/algorithms/hsvi.tpp</label>
      </node>
      <node id="3301">
        <label>math.h</label>
      </node>
      <node id="3337">
        <label>sdm/utils/value_function/initializer/pomdp_initializer.hpp</label>
        <link refid="pomdp__initializer_8hpp"/>
        <childnode refid="3300" relation="include">
        </childnode>
        <childnode refid="3338" relation="include">
        </childnode>
      </node>
      <node id="3315">
        <label>cstdlib</label>
      </node>
      <node id="3298">
        <label>iostream</label>
      </node>
      <node id="3305">
        <label>cstddef</label>
      </node>
      <node id="3330">
        <label>sdm/tools.hpp</label>
        <link refid="tools_8hpp"/>
        <childnode refid="3303" relation="include">
        </childnode>
        <childnode refid="3315" relation="include">
        </childnode>
        <childnode refid="3331" relation="include">
        </childnode>
        <childnode refid="3316" relation="include">
        </childnode>
        <childnode refid="3298" relation="include">
        </childnode>
      </node>
      <node id="3306">
        <label>unordered_map</label>
      </node>
      <node id="3300">
        <label>sdm/utils/value_function/initializer.hpp</label>
        <link refid="initializer_8hpp"/>
        <childnode refid="3301" relation="include">
        </childnode>
        <childnode refid="3302" relation="include">
        </childnode>
        <childnode refid="3323" relation="include">
        </childnode>
        <childnode refid="3333" relation="include">
        </childnode>
      </node>
      <node id="3295">
        <label>boost/bind.hpp</label>
      </node>
      <node id="3314">
        <label>sdm/utils/linear_algebra/vector_impl.hpp</label>
        <link refid="vector__impl_8hpp"/>
        <childnode refid="3315" relation="include">
        </childnode>
        <childnode refid="3316" relation="include">
        </childnode>
      </node>
      <node id="3293">
        <label>/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/value_function/initializers.hpp</label>
        <link refid="initializers_8hpp"/>
        <childnode refid="3294" relation="include">
        </childnode>
        <childnode refid="3295" relation="include">
        </childnode>
        <childnode refid="3296" relation="include">
        </childnode>
        <childnode refid="3297" relation="include">
        </childnode>
        <childnode refid="3300" relation="include">
        </childnode>
        <childnode refid="3335" relation="include">
        </childnode>
        <childnode refid="3337" relation="include">
        </childnode>
      </node>
      <node id="3321">
        <label>sdm/core/state/serialized_state.hpp</label>
        <link refid="serialized__state_8hpp"/>
        <childnode refid="3304" relation="include">
        </childnode>
        <childnode refid="3297" relation="include">
        </childnode>
        <childnode refid="3322" relation="include">
        </childnode>
      </node>
      <node id="3333">
        <label>sdm/utils/value_function/state_2_occupancy_vf.hpp</label>
        <link refid="state__2__occupancy__vf_8hpp"/>
        <childnode refid="3304" relation="include">
        </childnode>
        <childnode refid="3325" relation="include">
        </childnode>
        <childnode refid="3334" relation="include">
        </childnode>
      </node>
      <node id="3324">
        <label>memory</label>
      </node>
      <node id="3304">
        <label>sdm/types.hpp</label>
        <link refid="types_8hpp"/>
        <childnode refid="3305" relation="include">
        </childnode>
        <childnode refid="3298" relation="include">
        </childnode>
        <childnode refid="3306" relation="include">
        </childnode>
        <childnode refid="3307" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3340">
        <label>/home/dalbert/Documents/SDMStudio/sdms/src/sdm/algorithms.hpp</label>
        <link refid="algorithms_8hpp"/>
      </node>
      <node id="3339">
        <label>/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/value_function/initializers.hpp</label>
        <link refid="initializers_8hpp"/>
        <childnode refid="3340" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classsdm_1_1InitializerFactory" prot="public">sdm::InitializerFactory</innerclass>
    <innernamespace refid="namespacesdm">sdm</innernamespace>
    <briefdescription>
<para>This file contains the initializer factory class. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>David Albert (<ulink url="mailto:david.albert@insa-lyon.fr">david.albert@insa-lyon.fr</ulink>) </para></simplesect>
<simplesect kind="version"><para>1.0 </para></simplesect>
<simplesect kind="date"><para>24/03/2021</para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2021 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/bind.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/function.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="struct_2vector_8hpp" kindref="compound">sdm/utils/struct/vector.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="initializer_8hpp" kindref="compound">sdm/utils/value_function/initializer.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="mdp__initializer_8hpp" kindref="compound">sdm/utils/value_function/initializer/mdp_initializer.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="pomdp__initializer_8hpp" kindref="compound">sdm/utils/value_function/initializer/pomdp_initializer.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacesdm" kindref="compound">sdm</ref></highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TState,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TAction,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TA&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TInit&gt;</highlight></codeline>
<codeline lineno="25" refid="namespacesdm_1a021677cb937a0e95e24b116408751608" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Initializer&lt;TState,<sp/>TAction&gt;&gt;<sp/><ref refid="namespacesdm_1a021677cb937a0e95e24b116408751608" kindref="member">createInstance</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;TInit&lt;TState,<sp/>TAction&gt;&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TInit&lt;TState,<sp/>TAction&gt;);<sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TState,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TAction,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TA&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TInit&gt;</highlight></codeline>
<codeline lineno="28" refid="namespacesdm_1a2a4c89cf39c27c9b57e9370d3ebfccb4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Initializer&lt;TState,<sp/>TAction&gt;&gt;<sp/><ref refid="namespacesdm_1a2a4c89cf39c27c9b57e9370d3ebfccb4" kindref="member">createInstanceAlgoInit</ref>(std::string<sp/>algo_name,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>error,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trials)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;TInit&lt;TState,<sp/>TAction&gt;&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TInit&lt;TState,<sp/>TAction&gt;(algo_name,<sp/>error,<sp/>trials));<sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TState,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TAction&gt;</highlight></codeline>
<codeline lineno="31" refid="namespacesdm_1a60278d7179221d4650ff62e4c7d19100" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Initializer&lt;TState,<sp/>TAction&gt;&gt;<sp/><ref refid="namespacesdm_1a60278d7179221d4650ff62e4c7d19100" kindref="member">createInstanceTabMDPInit</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::bind(createInstanceAlgoInit&lt;TState,<sp/>TAction,<sp/>MDPInitializer&gt;,<sp/></highlight><highlight class="stringliteral">&quot;tabular_hsvi&quot;</highlight><highlight class="normal">,<sp/>0.,<sp/>10000)();<sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TState,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TAction&gt;</highlight></codeline>
<codeline lineno="34" refid="namespacesdm_1a1db0721c76eb371274bff8cf8bb79e15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Initializer&lt;TState,<sp/>TAction&gt;&gt;<sp/><ref refid="namespacesdm_1a1db0721c76eb371274bff8cf8bb79e15" kindref="member">createInstanceTabPOMDPInit</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::bind(createInstanceAlgoInit&lt;TState,<sp/>TAction,<sp/>POMDPInitializer&gt;,<sp/></highlight><highlight class="stringliteral">&quot;tabular_hsvi&quot;</highlight><highlight class="normal">,<sp/>0.,<sp/>10000)();<sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TState,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TAction&gt;</highlight></codeline>
<codeline lineno="47" refid="classsdm_1_1InitializerFactory" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classsdm_1_1InitializerFactory" kindref="compound">InitializerFactory</ref></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::shared_ptr&lt;Initializer&lt;TState,<sp/>TAction&gt;&gt;<sp/>(*)()&gt;<sp/><ref refid="classsdm_1_1InitializerFactory_1abd00d92727898f39429fa7a3907f7400" kindref="member">map_type</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classsdm_1_1InitializerFactory_1abd00d92727898f39429fa7a3907f7400" kindref="member">map_type</ref><sp/>registry_<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;MinInitializer&quot;</highlight><highlight class="normal">,<sp/>&amp;createInstance&lt;TState,<sp/>TAction,<sp/>MinInitializer&gt;},</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;MaxInitializer&quot;</highlight><highlight class="normal">,<sp/>&amp;createInstance&lt;TState,<sp/>TAction,<sp/>MaxInitializer&gt;},</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;BlindInitializer&quot;</highlight><highlight class="normal">,<sp/>&amp;createInstance&lt;TState,<sp/>TAction,<sp/>BlindInitializer&gt;},</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;ZeroInitializer&quot;</highlight><highlight class="normal">,<sp/>&amp;createInstance&lt;TState,<sp/>TAction,<sp/>ZeroInitializer&gt;},</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{&quot;PolicyEvaluationInitializer&quot;,<sp/>&amp;createInstance&lt;TState,<sp/>TAction,<sp/>PolicyEvaluationInitializer&gt;},</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;MdpHsviInitializer&quot;</highlight><highlight class="normal">,<sp/>&amp;createInstanceTabMDPInit&lt;TState,<sp/>TAction&gt;},</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;PomdpHsviInitializer&quot;</highlight><highlight class="normal">,<sp/>&amp;createInstanceTabPOMDPInit&lt;TState,<sp/>TAction&gt;},</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="62" refid="classsdm_1_1InitializerFactory_1abd00d92727898f39429fa7a3907f7400" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classsdm_1_1InitializerFactory_1abd00d92727898f39429fa7a3907f7400" kindref="member">map_type</ref><sp/>&amp;getRegistry()</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>registry_;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="namespacesdm_1_1algo_1a39dce981d596f5772a2c652e5c563a47" kindref="member">available</ref>()</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>available_init;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;pair_init<sp/>:<sp/>registry_)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>available_init.push_back(pair_init.first);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>available_init;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classsdm_1_1InitializerFactory_1a4dc1ecd69bc6a63f71635d30f7c6b549" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Initializer&lt;TState,<sp/>TAction&gt;&gt;<sp/><ref refid="classsdm_1_1InitializerFactory_1a4dc1ecd69bc6a63f71635d30f7c6b549" kindref="member">make</ref>(std::string<sp/>name)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>map_type::iterator<sp/>it<sp/>=<sp/><ref refid="classsdm_1_1InitializerFactory" kindref="compound">InitializerFactory&lt;TState, TAction&gt;::getRegistry</ref>().find(name);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/><ref refid="classsdm_1_1InitializerFactory" kindref="compound">InitializerFactory&lt;TState, TAction&gt;::getRegistry</ref>().end())</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>init_names<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;v<sp/>:<sp/><ref refid="classsdm_1_1InitializerFactory" kindref="compound">InitializerFactory&lt;TState, TAction&gt;::available</ref>())</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_names<sp/>=<sp/>init_names<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>v<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsdm_1_1exception_1_1Exception" kindref="compound">sdm::exception::Exception</ref>(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>registered.<sp/>Available<sp/>initializers<sp/>are<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>init_names<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TS,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TA&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TInitializer&gt;</highlight></codeline>
<codeline lineno="91" refid="classsdm_1_1InitializerFactory_1a5b050dd676c030b73171c001474bdbf5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classsdm_1_1InitializerFactory_1a5b050dd676c030b73171c001474bdbf5" kindref="member">addToRegistry</ref>(std::string<sp/>name)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getRegistry().find(name)<sp/>==<sp/>getRegistry().end())</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsdm_1_1InitializerFactory" kindref="compound">InitializerFactory&lt;TState, TAction&gt;::getRegistry</ref>().insert(std::make_pair(name,<sp/>&amp;createInstance&lt;TState,<sp/>TAction,<sp/>TInitializer&gt;));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classsdm_1_1exception_1_1Exception" kindref="compound">sdm::exception::Exception</ref>(</highlight><highlight class="stringliteral">&quot;Key<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>already<sp/>used<sp/>in<sp/>Initializer<sp/>Registry.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TState,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TAction&gt;</highlight></codeline>
<codeline lineno="105" refid="namespacesdm_1ab0c2df6332f400b5cfb0c99934df841f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Initializer&lt;TState,<sp/>TAction&gt;&gt;<sp/><ref refid="namespacesdm_1ab0c2df6332f400b5cfb0c99934df841f" kindref="member">makeInitializer</ref>(std::string<sp/>init_name)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classsdm_1_1InitializerFactory_1a4dc1ecd69bc6a63f71635d30f7c6b549" kindref="member">InitializerFactory&lt;TState, TAction&gt;::make</ref>(init_name);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>sdm</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/utils/value_function/initializers.hpp"/>
  </compounddef>
</doxygen>
