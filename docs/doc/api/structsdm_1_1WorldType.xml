<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structsdm_1_1WorldType" kind="struct" language="C++" prot="public">
    <compoundname>sdm::WorldType</compoundname>
    <includes refid="types_8hpp" local="no">types.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>TState</declname>
        <defname>TState</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>TAction</declname>
        <defname>TAction</defname>
        <defval>void</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structsdm_1_1WorldType_1a0ec9d3e246901efb4f340789b61b45d2" prot="public" static="no">
        <type>decltype(<ref refid="structsdm_1_1WorldType" kindref="compound">WorldType</ref>&lt; TState, TAction &gt;::<ref refid="structsdm_1_1WorldType_1ae9de80e58e7d9bb1a8214335ae177d19" kindref="member">getWorldType</ref>())</type>
        <definition>using sdm::WorldType&lt; TState, TAction &gt;::type =  decltype(WorldType&lt;TState, TAction&gt;::getWorldType())</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/world_type.hpp" line="75" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/world_type.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structsdm_1_1WorldType_1a38f1cf8c989cc07421900471a2b61b9f" prot="public" static="no">
        <type>decltype(<ref refid="structsdm_1_1WorldType" kindref="compound">WorldType</ref>&lt; TState, TAction &gt;::<ref refid="structsdm_1_1WorldType_1ae79fe50e6bf8ae3c29fda084df9216db" kindref="member">getUnderlyingProblem</ref>())</type>
        <definition>using sdm::WorldType&lt; TState, TAction &gt;::underlying_problem_type =  decltype(WorldType&lt;TState, TAction&gt;::getUnderlyingProblem())</definition>
        <argsstring></argsstring>
        <name>underlying_problem_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/world_type.hpp" line="76" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/world_type.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structsdm_1_1WorldType_1ae9de80e58e7d9bb1a8214335ae177d19" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>is_mdp</declname>
            <defname>is_mdp</defname>
            <defval>std::is_same&lt;TState, <ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref>&gt;::value</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; is_mdp, <ref refid="classsdm_1_1DiscreteMDP" kindref="compound">DiscreteMDP</ref> &gt;</type>
        <definition>static std::enable_if_t&lt;is_mdp, DiscreteMDP&gt; sdm::WorldType&lt; TState, TAction &gt;::getWorldType</definition>
        <argsstring>()</argsstring>
        <name>getWorldType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/world_type.hpp" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structsdm_1_1WorldType_1a4a099a00bd018eacd35c74a833b272e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>is_belief_mdp</declname>
            <defname>is_belief_mdp</defname>
            <defval>std::is_same&lt;TState, <ref refid="namespacesdm_1a0f879b55491e973a5c14fb31452c9a3f" kindref="member">BeliefState</ref>&gt;::value</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; is_belief_mdp, <ref refid="classsdm_1_1BeliefMDP" kindref="compound">BeliefMDP</ref>&lt; <ref refid="namespacesdm_1a0f879b55491e973a5c14fb31452c9a3f" kindref="member">BeliefState</ref>, <ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref>, <ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref> &gt; &gt;</type>
        <definition>static std::enable_if_t&lt;is_belief_mdp, BeliefMDP&lt;BeliefState, number, number&gt; &gt; sdm::WorldType&lt; TState, TAction &gt;::getWorldType</definition>
        <argsstring>()</argsstring>
        <name>getWorldType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/world_type.hpp" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structsdm_1_1WorldType_1a3a6ed1bea0e44583e4fecf787eecd9a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>is_serialized_mdp</declname>
            <defname>is_serialized_mdp</defname>
            <defval>std::is_same&lt;TState, <ref refid="classsdm_1_1SerializedState" kindref="compound">SerializedState</ref>&gt;::value</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; is_serialized_mdp, <ref refid="classsdm_1_1SerializedMDP" kindref="compound">SerializedMDP</ref>&lt; <ref refid="classsdm_1_1SerializedState" kindref="compound">SerializedState</ref>, <ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref> &gt; &gt;</type>
        <definition>static std::enable_if_t&lt;is_serialized_mdp, SerializedMDP&lt;SerializedState, number&gt; &gt; sdm::WorldType&lt; TState, TAction &gt;::getWorldType</definition>
        <argsstring>()</argsstring>
        <name>getWorldType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/world_type.hpp" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structsdm_1_1WorldType_1a41d500a3f143dab0f49e47b85762a5b7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>is_serialized_occupancy_mdp</declname>
            <defname>is_serialized_occupancy_mdp</defname>
            <defval><ref refid="structstd_1_1is__any" kindref="compound">std::is_any</ref>&lt;TState, <ref refid="classsdm_1_1SerializedOccupancyState" kindref="compound">SerializedOccupancyState</ref>&lt;&gt;&gt;::value</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; is_serialized_occupancy_mdp, <ref refid="classsdm_1_1SerializedOccupancyMDP" kindref="compound">SerializedOccupancyMDP</ref>&lt; <ref refid="classsdm_1_1SerializedOccupancyState" kindref="compound">SerializedOccupancyState</ref>&lt;&gt;, <ref refid="classsdm_1_1DeterministicDecisionRule" kindref="compound">DeterministicDecisionRule</ref>&lt; <ref refid="namespacesdm_1a3d3c69f530ed43dd592eb54bffdf7699" kindref="member">HistoryTree_p</ref>&lt; <ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref> &gt;, <ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref> &gt; &gt; &gt;</type>
        <definition>static std::enable_if_t&lt;is_serialized_occupancy_mdp, SerializedOccupancyMDP&lt;SerializedOccupancyState&lt;&gt;, DeterministicDecisionRule&lt;HistoryTree_p&lt;number&gt;, number&gt; &gt; &gt; sdm::WorldType&lt; TState, TAction &gt;::getWorldType</definition>
        <argsstring>()</argsstring>
        <name>getWorldType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/world_type.hpp" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structsdm_1_1WorldType_1a5b51b044cee18fd33d07b46e72d7b91a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>is_occupancy_mdp</declname>
            <defname>is_occupancy_mdp</defname>
            <defval>std::is_same&lt;TState, <ref refid="classsdm_1_1OccupancyState" kindref="compound">OccupancyState</ref>&lt;&gt;&gt;::value</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; is_occupancy_mdp, <ref refid="classsdm_1_1OccupancyMDP" kindref="compound">OccupancyMDP</ref>&lt; <ref refid="classsdm_1_1OccupancyState" kindref="compound">OccupancyState</ref>&lt;&gt;, <ref refid="classsdm_1_1Joint" kindref="compound">Joint</ref>&lt; <ref refid="classsdm_1_1DeterministicDecisionRule" kindref="compound">DeterministicDecisionRule</ref>&lt; <ref refid="namespacesdm_1a3d3c69f530ed43dd592eb54bffdf7699" kindref="member">HistoryTree_p</ref>&lt; <ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref> &gt;, <ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref> &gt; &gt; &gt; &gt;</type>
        <definition>static std::enable_if_t&lt;is_occupancy_mdp, OccupancyMDP&lt;OccupancyState&lt;&gt;, Joint&lt;DeterministicDecisionRule&lt;HistoryTree_p&lt;number&gt;, number&gt; &gt; &gt; &gt; sdm::WorldType&lt; TState, TAction &gt;::getWorldType</definition>
        <argsstring>()</argsstring>
        <name>getWorldType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/world_type.hpp" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structsdm_1_1WorldType_1ae79fe50e6bf8ae3c29fda084df9216db" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>is_solving_mdp</declname>
            <defname>is_solving_mdp</defname>
            <defval>std::is_same&lt;TState, <ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref>&gt;::value</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; is_solving_mdp, <ref refid="classsdm_1_1DiscreteMDP" kindref="compound">DiscreteMDP</ref> &gt;</type>
        <definition>static std::enable_if_t&lt;is_solving_mdp, DiscreteMDP&gt; sdm::WorldType&lt; TState, TAction &gt;::getUnderlyingProblem</definition>
        <argsstring>()</argsstring>
        <name>getUnderlyingProblem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/world_type.hpp" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structsdm_1_1WorldType_1a8ef4694a23463192608c0d6e33573561" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>is_solving_mmdp</declname>
            <defname>is_solving_mmdp</defname>
            <defval>std::is_same&lt;TState, <ref refid="classsdm_1_1SerializedState" kindref="compound">SerializedState</ref>&gt;::value</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; is_solving_mmdp, <ref refid="classsdm_1_1DiscreteMMDP" kindref="compound">DiscreteMMDP</ref> &gt;</type>
        <definition>static std::enable_if_t&lt;is_solving_mmdp, DiscreteMMDP&gt; sdm::WorldType&lt; TState, TAction &gt;::getUnderlyingProblem</definition>
        <argsstring>()</argsstring>
        <name>getUnderlyingProblem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/world_type.hpp" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structsdm_1_1WorldType_1a0d2b0019cf1564b851c204cbe9c8ffcf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>is_solving_pomdp</declname>
            <defname>is_solving_pomdp</defname>
            <defval>std::is_same&lt;TState, <ref refid="namespacesdm_1a0f879b55491e973a5c14fb31452c9a3f" kindref="member">BeliefState</ref>&gt;::value</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; is_solving_pomdp, <ref refid="classsdm_1_1DiscretePOMDP" kindref="compound">DiscretePOMDP</ref> &gt;</type>
        <definition>static std::enable_if_t&lt;is_solving_pomdp, DiscretePOMDP&gt; sdm::WorldType&lt; TState, TAction &gt;::getUnderlyingProblem</definition>
        <argsstring>()</argsstring>
        <name>getUnderlyingProblem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/world_type.hpp" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structsdm_1_1WorldType_1ac16aa85d03cc06149c98ff8ad98b5a7d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>is_solving_decpomdp</declname>
            <defname>is_solving_decpomdp</defname>
            <defval><ref refid="structstd_1_1is__any" kindref="compound">std::is_any</ref>&lt;TState, <ref refid="classsdm_1_1OccupancyState" kindref="compound">OccupancyState</ref>&lt;<ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref>, <ref refid="namespacesdm_1aa5e124f3febe0e2c52f3c1c3ed35cc17" kindref="member">JointHistoryTree_p</ref>&lt;<ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref>&gt;&gt;, <ref refid="classsdm_1_1SerializedOccupancyState" kindref="compound">SerializedOccupancyState</ref>&lt;<ref refid="classsdm_1_1SerializedState" kindref="compound">SerializedState</ref>, <ref refid="namespacesdm_1aa5e124f3febe0e2c52f3c1c3ed35cc17" kindref="member">JointHistoryTree_p</ref>&lt;<ref refid="namespacesdm_1a8a7c60fa767668fa52b349d259104595" kindref="member">number</ref>&gt;&gt;&gt;::value</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; is_solving_decpomdp, <ref refid="classsdm_1_1DiscreteDecPOMDP" kindref="compound">DiscreteDecPOMDP</ref> &gt;</type>
        <definition>static std::enable_if_t&lt;is_solving_decpomdp, DiscreteDecPOMDP&gt; sdm::WorldType&lt; TState, TAction &gt;::getUnderlyingProblem</definition>
        <argsstring>()</argsstring>
        <name>getUnderlyingProblem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/world/world_type.hpp" line="73" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Allows developers to get access to the type of underlying problem that is solved when dealing with a kind of state and action in <ref refid="classsdm_1_1HSVI" kindref="compound">HSVI</ref>. Usage Example : <computeroutput><ref refid="structsdm_1_1WorldType" kindref="compound">WorldType</ref>&lt;BeliefState, number&gt;::type</computeroutput> will return the type <computeroutput><ref refid="classsdm_1_1DiscretePOMDP" kindref="compound">DiscretePOMDP</ref></computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TState</parametername>
</parameternamelist>
<parameterdescription>
<para>the state type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TAction</parametername>
</parameternamelist>
<parameterdescription>
<para>the action type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/types.hpp" line="102" column="1" bodyfile="/home/dalbert/Documents/SDMStudio/sdms/src/sdm/types.hpp" bodystart="102" bodyend="-1"/>
    <listofallmembers>
      <member refid="structsdm_1_1WorldType_1ae79fe50e6bf8ae3c29fda084df9216db" prot="public" virt="non-virtual"><scope>sdm::WorldType</scope><name>getUnderlyingProblem</name></member>
      <member refid="structsdm_1_1WorldType_1a8ef4694a23463192608c0d6e33573561" prot="public" virt="non-virtual"><scope>sdm::WorldType</scope><name>getUnderlyingProblem</name></member>
      <member refid="structsdm_1_1WorldType_1a0d2b0019cf1564b851c204cbe9c8ffcf" prot="public" virt="non-virtual"><scope>sdm::WorldType</scope><name>getUnderlyingProblem</name></member>
      <member refid="structsdm_1_1WorldType_1ac16aa85d03cc06149c98ff8ad98b5a7d" prot="public" virt="non-virtual"><scope>sdm::WorldType</scope><name>getUnderlyingProblem</name></member>
      <member refid="structsdm_1_1WorldType_1ae9de80e58e7d9bb1a8214335ae177d19" prot="public" virt="non-virtual"><scope>sdm::WorldType</scope><name>getWorldType</name></member>
      <member refid="structsdm_1_1WorldType_1a4a099a00bd018eacd35c74a833b272e2" prot="public" virt="non-virtual"><scope>sdm::WorldType</scope><name>getWorldType</name></member>
      <member refid="structsdm_1_1WorldType_1a3a6ed1bea0e44583e4fecf787eecd9a3" prot="public" virt="non-virtual"><scope>sdm::WorldType</scope><name>getWorldType</name></member>
      <member refid="structsdm_1_1WorldType_1a41d500a3f143dab0f49e47b85762a5b7" prot="public" virt="non-virtual"><scope>sdm::WorldType</scope><name>getWorldType</name></member>
      <member refid="structsdm_1_1WorldType_1a5b51b044cee18fd33d07b46e72d7b91a" prot="public" virt="non-virtual"><scope>sdm::WorldType</scope><name>getWorldType</name></member>
      <member refid="structsdm_1_1WorldType_1a0ec9d3e246901efb4f340789b61b45d2" prot="public" virt="non-virtual"><scope>sdm::WorldType</scope><name>type</name></member>
      <member refid="structsdm_1_1WorldType_1a38f1cf8c989cc07421900471a2b61b9f" prot="public" virt="non-virtual"><scope>sdm::WorldType</scope><name>underlying_problem_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
